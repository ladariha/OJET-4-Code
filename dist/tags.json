{
    "version": 1,
    "tags": [{
        "attributes": [{
            "name": "expanded",
            "description": "A list of expanded child collapsibles."
        }, {
            "name": "multiple",
            "description": "Specifies whether multiple collapsibles can be open at the same time."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-before-expand",
            "description": "Triggered immediately before any collapsible in the accordion is expanded."
        }, {
            "name": "on-oj-expand",
            "description": "Triggered after any collapsible in the accordion is expanded."
        }, {
            "name": "on-oj-before-collapse",
            "description": "Triggered immediately before any collapsible in the accordion is collapsed."
        }, {
            "name": "on-oj-collapse",
            "description": "Triggered after any collapsible in the accordion has been collapsed."
        }],
        "name": "oj-accordion",
        "description": "Displays a set of Collapsible child elements."
    }, {
        "attributes": [{
            "name": "initials",
            "description": "Specifies the initials of the avatar."
        }, {
            "name": "size",
            "description": "Specifies the size of the avatar.",
            "values": [{
                "name": "xxs"
            }, {
                "name": "xs"
            }, {
                "name": "sm"
            }, {
                "name": "md"
            }, {
                "name": "lg"
            }, {
                "name": "xl"
            }, {
                "name": "xxl"
            }]
        }, {
            "name": "src",
            "description": "Specifies the src for the image of the avatar."
        }],
        "name": "oj-avatar",
        "description": "An icon capable of displaying a custom image, initials, or a placeholder image."
    }, {
        "attributes": [{
            "name": "config",
            "description": "Configuration object that defines a view and a data available to the oj-bind-dom element.\nSee details for each attribute. The configuration object can be specified\neither directly or via a Promise."
        }],
        "name": "oj-bind-dom",
        "description": "Renders HTML content with access to passed in data properties."
    }, {
        "attributes": [{
            "name": "as",
            "description": "An alias for the array item. This can be especially useful\nif multiple oj-bind-for-each elements are nested to provide access to the data\nfor each level of iteration."
        }, {
            "name": "data",
            "description": "The array or an oj.DataProvider that you wish to iterate over. Required property.\nNote that the <oj-bind-for-each&gt; will dynamically update the generated\nDOM in response to changes if the value is an observableArray."
        }],
        "name": "oj-bind-for-each",
        "description": "Binds items of an array to the specified markup section. The markup section is duplicated for each array item when element is rendered."
    }, {
        "attributes": [{
            "name": "test",
            "description": "The test condition for the if clause. The children of the element will\nonly be rendered if the test is true."
        }],
        "name": "oj-bind-if",
        "description": "Conditionally render its contents only if a provided test returns true."
    }, {
        "attributes": [{
            "name": "index",
            "description": "An index value allowing the slot children to be individually slotted. This is useful when the composite needs to add additional DOM around slotted children."
        }, {
            "name": "name",
            "description": "The name of the slot."
        }],
        "name": "oj-bind-slot",
        "description": "A placeholder for child DOM to appear in a specified slot."
    }, {
        "attributes": [{
            "name": "as",
            "description": "An optional alias for $current that can be referenced inside the default template DOM. Note\nthat application $current aliasing should be done with the\ndata-oj-as attribute on the\ntemplate element."
        }, {
            "name": "data",
            "description": "The object containing additional context variables to extend the stamped template nodes'\nbinding context. These variables will be exposed as variables on $current and aliases."
        }, {
            "name": "name",
            "description": "The name of the slot."
        }],
        "name": "oj-bind-template-slot",
        "description": "A placeholder for stamped child DOM to appear in a specified slot."
    }, {
        "attributes": [{
            "name": "value",
            "description": "The value of the text node."
        }],
        "name": "oj-bind-text",
        "description": "Binds a text node to an expression."
    }, {
        "attributes": [{
            "name": "chroming",
            "description": "Indicates in what states the button has chrome (background and border).",
            "values": [{
                "name": "full"
            }, {
                "name": "half"
            }, {
                "name": "outlined"
            }]
        }, {
            "name": "disabled",
            "description": "Specifies that the button element should be disabled."
        }, {
            "name": "display",
            "description": "Specifies whether the button displays label and icons, or just icons.",
            "values": [{
                "name": "all"
            }, {
                "name": "icons"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-action",
            "description": "Triggered when a button is clicked. This will be triggered by keyboard events as well as mouse/touch events. To ensure keyboard accessibility, the only correct, supported way to react to the click of a button is to listen for this event. Click listeners and href navigation should not be used."
        }],
        "name": "oj-button",
        "description": "A clickable button."
    }, {
        "attributes": [{
            "name": "chroming",
            "description": "Indicates in what states the buttonset has chrome (background and border).",
            "values": [{
                "name": "full"
            }, {
                "name": "half"
            }, {
                "name": "outlined"
            }]
        }, {
            "name": "disabled",
            "description": "Specifies that the buttonset element should be disabled."
        }, {
            "name": "display",
            "description": "Specifies whether the buttonset displays label and icons, or just icons.",
            "values": [{
                "name": "all"
            }, {
                "name": "icons"
            }]
        }, {
            "name": "focusManagement",
            "description": "Should be set to none when the buttonset is placed within a toolbar.",
            "values": [{
                "name": "none"
            }, {
                "name": "oneTabstop"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "value",
            "description": "Indicates which oj-options in the buttonset are selected."
        }],
        "name": "oj-buttonset-many",
        "description": "A grouping of related buttons where any number of buttons may be selected."
    }, {
        "attributes": [{
            "name": "chroming",
            "description": "Indicates in what states the buttonset has chrome (background and border).",
            "values": [{
                "name": "full"
            }, {
                "name": "half"
            }, {
                "name": "outlined"
            }]
        }, {
            "name": "disabled",
            "description": "Specifies that the buttonset element should be disabled."
        }, {
            "name": "display",
            "description": "Specifies whether the buttonset displays label and icons, or just icons.",
            "values": [{
                "name": "all"
            }, {
                "name": "icons"
            }]
        }, {
            "name": "focusManagement",
            "description": "Should be set to none when the buttonset is placed within a toolbar.",
            "values": [{
                "name": "none"
            }, {
                "name": "oneTabstop"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "value",
            "description": "Indicates which oj-option in the buttonset is selected."
        }],
        "name": "oj-buttonset-one",
        "description": "A grouping of related buttons where only one button may be selected."
    }, {
        "attributes": [{
            "name": "animationOnDataChange",
            "description": "Defines the animation that is applied on data changes. Animation is automatically disabled when there are a large number of data items.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }, {
                "name": "slideToLeft"
            }, {
                "name": "slideToRight"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Defines the animation that is shown on initial display. Animation is automatically disabled when there are a large number of data items.",
            "values": [{
                "name": "alphaFade"
            }, {
                "name": "auto"
            }, {
                "name": "none"
            }, {
                "name": "zoom"
            }]
        }, {
            "name": "as",
            "description": "An alias for the $current context variable when referenced inside the item, series or group templates when using a DataProvider."
        }, {
            "name": "coordinateSystem",
            "description": "The coordinate system of the chart. Only applies to bar, line, area, combo, scatter, and bubble charts.",
            "values": [{
                "name": "cartesian"
            }, {
                "name": "polar"
            }]
        }, {
            "name": "data",
            "description": "An object with the following properties, used to define the series and groups when using a DataProvider to provide data to the chart. Also accepts a Promise for deferred data rendering."
        }, {
            "name": "dataCursor",
            "description": "Defines whether the data cursor is enabled. If set to \"auto\", the data cursor is shown only for line or area charts on touch devices. The data cursor is not shown when the tooltip is null and it is not supported on polar charts.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "dataCursorBehavior",
            "description": "Defines the behavior of the data cursor when moving between data items.",
            "values": [{
                "name": "auto"
            }, {
                "name": "smooth"
            }, {
                "name": "snap"
            }]
        }, {
            "name": "dataCursorPosition",
            "description": "Speficies the position of the data cursor. Used for synchronizing data cursors across multiple charts. Null if the data cursor is not displayed."
        }, {
            "name": "dataLabel",
            "description": "A function that returns a custom data label. The function takes a dataContext argument, provided by the chart, with the following properties: id: The id of the data item. series: The id of the series the data item belongs to. group: The id or an array of ids of the group(s) the data item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids. value, targetValue, x, y, z, low, high, open, close, volume: The values of the data item. label: The label for the data item if the dataLabel callback is ignored. The dataLabel callback can concatenate this with another string to easily enhance the default label. totalValue: The total of all values in the chart. This will only be included for pie charts. data: The data object of the data item. For nested items, it will be an array containing the parent item data and nested item data. itemData: The row data object for the data item. This will only be set if a DataProvider is being used. seriesData: The data for the series the data item belongs to. groupData: An array of data for the group the data item belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the data item. componentElement: The chart element. The function may return a number or a string or in the case of range charts, an array of numbers or strings. If any label is a number, it will be formatted by the valueFormat of the type 'label' before being used as labels."
        }, {
            "name": "dnd",
            "description": "Provides support for HTML5 Drag and Drop events. Please refer to third party documentation on HTML5 Drag and Drop to learn how to use it."
        }, {
            "name": "dragMode",
            "description": "The action that is performed when a drag occurs on the chart. Pan and marquee zoom are only available if zoom and scroll is turned on. Marquee select is only available if multiple selection is turned on. If the value is set to \"user\" and multiple actions are available, buttons will be displayed on the plot area to let users switch between modes.",
            "values": [{
                "name": "off"
            }, {
                "name": "pan"
            }, {
                "name": "select"
            }, {
                "name": "user"
            }, {
                "name": "zoom"
            }]
        }, {
            "name": "drilling",
            "description": "Whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). Use \"on\" to enable drilling for all series objects (legend items), group objects (x-axis labels), and data items. Use \"seriesOnly\" or \"groupsOnly\" to enable drilling for series objects or group objects only. To enable or disable drilling on individual series, group, or data item, use the drilling attribute in each series, group, or data item.",
            "values": [{
                "name": "groupsOnly"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }, {
                "name": "seriesOnly"
            }]
        }, {
            "name": "groupComparator",
            "description": "A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data. The group objects will have the same properties as the context for groupTemplate's $current."
        }, {
            "name": "groups",
            "description": "An array of objects with the following properties, used to define series labels and override series styles.\nOnly a single series is supported for stock charts. Also accepts a Promise for deferred data rendering."
        }, {
            "name": "hiddenCategories",
            "description": "An array of category strings used for filtering. Series or data items with any category matching an item in this array will be filtered."
        }, {
            "name": "hideAndShowBehavior",
            "description": "Defines the hide and show behavior that is performed when clicking on a legend item. When data items are hidden, the y axes can be optionally rescaled to fit to the remaining data.",
            "values": [{
                "name": "none"
            }, {
                "name": "withRescale"
            }, {
                "name": "withoutRescale"
            }]
        }, {
            "name": "highlightMatch",
            "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of category strings used for highlighting. Series or data items matching all categories in this array will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over data items.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "initialZooming",
            "description": "Whether automatic initial zooming is enabled. The valid values are \"first\" to initially zoom to the first data points (after the viewportMin) that can fit in the plot area, \"last\" to initially zoom to the last data points (before the viewportMax), and \"none\" to disable initial zooming. Only applies to bar, line, area, and combo charts with zoomAndScroll turned on.",
            "values": [{
                "name": "first"
            }, {
                "name": "last"
            }, {
                "name": "none"
            }]
        }, {
            "name": "legend",
            "description": "An object defining the style, positioning, and behavior of the legend."
        }, {
            "name": "orientation",
            "description": "The chart orientation. Only applies to bar, line, area, combo, box plot, and funnel charts.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "otherThreshold",
            "description": "Specifies the fraction of the whole pie under which a slice would be aggregated into an \"Other\" slice. Valid values range from 0 (default) to 1. For example, a value of 0.1 would cause all slices which are less than 10% of the pie to be aggregated into the \"Other\" slice. Only applies to pie chart."
        }, {
            "name": "overview",
            "description": "An object defining the overview scrollbar. Only applies if zoomAndScroll is not off. Currently only supported for vertical bar, line, area, stock, and combo charts."
        }, {
            "name": "pieCenter",
            "description": "An object defining the center content of a pie chart. Either a label can be displayed at the center of the pie chart or custom HTML content."
        }, {
            "name": "plotArea",
            "description": "An object defining the style of the plot area."
        }, {
            "name": "polarGridShape",
            "description": "Defines whether the grid shape of the polar chart is circle or polygon. Only applies to polar line and area charts.",
            "values": [{
                "name": "circle"
            }, {
                "name": "polygon"
            }]
        }, {
            "name": "selection",
            "description": "An array used to define the ids of the initially selected objects.\nWhen the selection is changed, the event.detail of the selectionChanged event will contain the following additional properties: Name Type Description selectionData Object an array containing objects describing the selected data items Properties Name Type Description data object the data of the item, if one was specified groupData Array the group data of the item seriesData object the series data of the item endGroup string the end group of a marquee selection on a chart with categorical axis startGroup string the start group of a marquee selection on a chart with categorical axis xMax number the maximum x value of a marquee selection xMin number the minimum x value of a marquee selection yMax number the maximum y value of a marquee selection yMin number the minimum y value of a marquee selection \n"
        }, {
            "name": "selectionMode",
            "description": "The type of selection behavior that is enabled on the chart.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "series",
            "description": "An array of objects with the following properties, used to define series labels and override series styles.\nOnly a single series is supported for stock charts. Also accepts a Promise for deferred data rendering."
        }, {
            "name": "seriesComparator",
            "description": "A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data. The series objects will have the same properties as the context for seriesTemplate's $current."
        }, {
            "name": "sorting",
            "description": "Specifies the sorting of the data. It should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.",
            "values": [{
                "name": "ascending"
            }, {
                "name": "descending"
            }, {
                "name": "off"
            }]
        }, {
            "name": "splitDualY",
            "description": "Defines whether the plot area is split into two sections, so that sets of data assigned to the different Y-axes appear in different parts of the plot area. Stock charts do not support \"off\".",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "splitterPosition",
            "description": "In a split dual-Y chart, specifies the fraction of the space that is given to the Y-axis subchart. Valid values are numbers from 0 to 1."
        }, {
            "name": "stack",
            "description": "Defines whether the data items are stacked. Only applies to bar, line, area, and combo charts. Does not apply to range series.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "stackLabel",
            "description": "Defines whether or not the total values of stacked data items should be displayed. Only applies to bar charts. It can be formatted by the valueFormat of the type 'label'.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "styleDefaults",
            "description": "An object defining the default styles for series colors, marker shapes, and other style attributes. Properties specified on this object may be overridden by specifications on the data object."
        }, {
            "name": "timeAxisType",
            "description": "The type of time axis to display in the chart. Time axis is only supported for Cartesian bar, line, area, stock, box plot, and combo charts. If the type is \"enabled\" or \"skipGaps\", the time values must be provided through the \"groups\" attribute and stacking is supported. If the type is \"skipGaps\", the groups will be rendered at a regular interval regardless of any time gaps that may exist in the data. If the type is \"mixedFrequency\", the time values must be provided through the \"x\" attribute of the the data items and stacking is not supported.",
            "values": [{
                "name": "auto"
            }, {
                "name": "disabled"
            }, {
                "name": "enabled"
            }, {
                "name": "mixedFrequency"
            }, {
                "name": "skipGaps"
            }]
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "touchResponse",
            "description": "Data visualizations require a press and hold delay before triggering tooltips, marquee selection, and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events if the element does not require an internal feature that requires a touch start gesture like panning, zooming, or when marquee selection is initiated. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if panning is not available for those elements that support the feature.",
            "values": [{
                "name": "auto"
            }, {
                "name": "touchStart"
            }]
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "type",
            "description": "The chart type.",
            "values": [{
                "name": "area"
            }, {
                "name": "bar"
            }, {
                "name": "boxPlot"
            }, {
                "name": "bubble"
            }, {
                "name": "combo"
            }, {
                "name": "funnel"
            }, {
                "name": "line"
            }, {
                "name": "lineWithArea"
            }, {
                "name": "pie"
            }, {
                "name": "pyramid"
            }, {
                "name": "scatter"
            }, {
                "name": "stock"
            }]
        }, {
            "name": "valueFormats",
            "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items."
        }, {
            "name": "xAxis",
            "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles."
        }, {
            "name": "y2Axis",
            "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles. Y2 axis is only supported for Cartesian bar, line, area, and combo charts."
        }, {
            "name": "yAxis",
            "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles."
        }, {
            "name": "zoomAndScroll",
            "description": "Specifies the zoom and scroll behavior of the chart. \"Live\" behavior means that the chart will be updated continuously as it is being manipulated, while \"delayed\" means that the update will wait until the zoom/scroll action is done. While \"live\" zoom and scroll provides the best end user experience, no guarantess are made about the rendering performance or usability for large data sets or slow client environments. If performance is an issue, \"delayed\" zoom and scroll should be used instead.",
            "values": [{
                "name": "delayed"
            }, {
                "name": "delayedScrollOnly"
            }, {
                "name": "live"
            }, {
                "name": "liveScrollOnly"
            }, {
                "name": "off"
            }]
        }, {
            "name": "zoomDirection",
            "description": "Specifies the zoom direction of bubble and scatter charts. \"Auto\" zooms in both x and y direction. Use \"x\" or \"y\" for single direction zooming.",
            "values": [{
                "name": "auto"
            }, {
                "name": "x"
            }, {
                "name": "y"
            }]
        }, {
            "name": "on-oj-select-input",
            "description": "Triggered during a selection gesture, such as a change in the marquee selection rectangle."
        }, {
            "name": "on-oj-viewport-change",
            "description": "Triggered after the viewport is changed due to a zoom or scroll operation."
        }, {
            "name": "on-oj-viewport-change-input",
            "description": "Triggered during a viewport change gesture, such as a drag operation on the overview window. Note: There are\nsituations where the chart cannot determine whether the viewport change gesture is still in progress, such\nas with mouse wheel zoom interactions. Standard viewportChange events are fired in these cases."
        }, {
            "name": "on-oj-drill",
            "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise)."
        }],
        "name": "oj-chart",
        "description": "Displays information graphically, making relationships among the data easier to understand."
    }, {
        "attributes": [{
            "name": "drilling",
            "description": "Whether drilling is enabled on the group label. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click. To enable drilling for all group labels at once, use the drilling attribute in the top level.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the group label text. Supports color, fontFamily, fontSize, fontStyle, fontWeight, textDecoration, cursor, backgroundColor, borderColor, borderRadius, and borderWidth properties. Only applies to a categorical axis."
        }, {
            "name": "name",
            "description": "The name of the group."
        }, {
            "name": "shortDesc",
            "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis."
        }],
        "name": "oj-chart-group",
        "description": "ojChartGroup"
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border."
        }, {
            "name": "borderWidth",
            "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border."
        }, {
            "name": "boxPlot",
            "description": "An object containing the style properties of the box plot item."
        }, {
            "name": "categories",
            "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used."
        }, {
            "name": "close",
            "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed."
        }, {
            "name": "color",
            "description": "The color of the data item."
        }, {
            "name": "drilling",
            "description": "Whether drilling is enabled for the data item. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all data items at once, use the drilling attribute in the top level.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "groupId",
            "description": "The array of id(s) for the group(s) the item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids."
        }, {
            "name": "high",
            "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart."
        }, {
            "name": "items",
            "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot."
        }, {
            "name": "label",
            "description": "The label for the data item. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick."
        }, {
            "name": "labelPosition",
            "description": "The position of the data label. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively. The 'outsideSlice' value only applies to pie charts. The 'aboveMarker', 'belowMarker', 'beforeMarker', and 'afterMarker' values only apply to line, area, scatter, and bubble series. The 'insideBarEdge' and 'outsideBarEdge' values only apply to non-polar bar series. Stacked bars do not support 'outsideBarEdge'. The chart does not currently adjust layout to fit labels within the plot area or deal with any overlaps between labels.",
            "values": [{
                "name": "aboveMarker"
            }, {
                "name": "afterMarker"
            }, {
                "name": "auto"
            }, {
                "name": "beforeMarker"
            }, {
                "name": "belowMarker"
            }, {
                "name": "center"
            }, {
                "name": "insideBarEdge"
            }, {
                "name": "none"
            }, {
                "name": "outsideBarEdge"
            }, {
                "name": "outsideSlice"
            }]
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the data label. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively."
        }, {
            "name": "low",
            "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart."
        }, {
            "name": "markerDisplayed",
            "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "markerShape",
            "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. The chart will style the custom shapes the same way as built-in shapes, supporting properties like color and borderColor and applying hover and selection effects. Only 'auto' is supported for range series."
        }, {
            "name": "markerSize",
            "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values."
        }, {
            "name": "open",
            "description": "The open value for stock candlestick."
        }, {
            "name": "pattern",
            "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
            "values": [{
                "name": "auto"
            }, {
                "name": "largeChecker"
            }, {
                "name": "largeCrosshatch"
            }, {
                "name": "largeDiagonalLeft"
            }, {
                "name": "largeDiagonalRight"
            }, {
                "name": "largeDiamond"
            }, {
                "name": "largeTriangle"
            }, {
                "name": "smallChecker"
            }, {
                "name": "smallCrosshatch"
            }, {
                "name": "smallDiagonalLeft"
            }, {
                "name": "smallDiagonalRight"
            }, {
                "name": "smallDiamond"
            }, {
                "name": "smallTriangle"
            }]
        }, {
            "name": "q1",
            "description": "The first quartile value for box plot."
        }, {
            "name": "q2",
            "description": "The second quartile (median) value for box plot."
        }, {
            "name": "q3",
            "description": "The third quartile value for box plot."
        }, {
            "name": "seriesId",
            "description": "The id for the series the item belongs to."
        }, {
            "name": "shortDesc",
            "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text."
        }, {
            "name": "source",
            "description": "The URI of the custom image. If specified, it takes precedence over shape."
        }, {
            "name": "sourceHover",
            "description": "The optional URI for the hover state. If not specified, the source image will be used."
        }, {
            "name": "sourceHoverSelected",
            "description": "The optional URI for the hover selected state. If not specified, the source image will be used."
        }, {
            "name": "sourceSelected",
            "description": "The optional URI for the selected state. If not specified, the source image will be used."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute."
        }, {
            "name": "targetValue",
            "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice."
        }, {
            "name": "value",
            "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point."
        }, {
            "name": "volume",
            "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis."
        }, {
            "name": "x",
            "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. For categorical axis, if the x value is not specified, it will default to the item index. For regular time axis, if the x value is not specified, it will default to the group name of the item."
        }, {
            "name": "y",
            "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts."
        }, {
            "name": "z",
            "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item."
        }],
        "name": "oj-chart-item",
        "description": "ojChartItem"
    }, {
        "attributes": [{
            "name": "areaColor",
            "description": "The area color of the series. Only applies if series type is area or lineWithArea."
        }, {
            "name": "areaSvgClassName",
            "description": "The CSS style class to apply if series type is area or lineWithArea. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "areaSvgStyle",
            "description": "The inline style to apply if series type is area or lineWithArea. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "assignedToY2",
            "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "borderColor",
            "description": "The border color of the series."
        }, {
            "name": "borderWidth",
            "description": "The border width of the series."
        }, {
            "name": "boxPlot",
            "description": "An object containing the style properties of the box plot series."
        }, {
            "name": "categories",
            "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used."
        }, {
            "name": "color",
            "description": "The color of the series."
        }, {
            "name": "displayInLegend",
            "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "drilling",
            "description": "Whether drilling is enabled on the series item. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click. To enable drilling for all series items at once, use the drilling attribute in the top level.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "lineStyle",
            "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
            "values": [{
                "name": "dashed"
            }, {
                "name": "dotted"
            }, {
                "name": "solid"
            }]
        }, {
            "name": "lineType",
            "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. centeredStepped and centeredSegmented are not supported for polar, scatter, and bubble charts.",
            "values": [{
                "name": "auto"
            }, {
                "name": "centeredSegmented"
            }, {
                "name": "centeredStepped"
            }, {
                "name": "curved"
            }, {
                "name": "none"
            }, {
                "name": "segmented"
            }, {
                "name": "stepped"
            }, {
                "name": "straight"
            }]
        }, {
            "name": "lineWidth",
            "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series."
        }, {
            "name": "markerColor",
            "description": "The color of the data markers, if different from the series color."
        }, {
            "name": "markerDisplayed",
            "description": "Defines whether the data markers should be displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "markerShape",
            "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. The chart will style the custom shapes the same way as built-in shapes, supporting properties like color and borderColor and applying hover and selection effects. Only 'auto' is supported for range series."
        }, {
            "name": "markerSize",
            "description": "The size of the data markers."
        }, {
            "name": "markerSvgClassName",
            "description": "The CSS style class to apply to the data markers.The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the marker color attribute."
        }, {
            "name": "markerSvgStyle",
            "description": "The inline style to apply to the data markers. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the marker color attribute."
        }, {
            "name": "name",
            "description": "The name of the series, displayed in the legend and tooltips."
        }, {
            "name": "pattern",
            "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
            "values": [{
                "name": "auto"
            }, {
                "name": "largeChecker"
            }, {
                "name": "largeCrosshatch"
            }, {
                "name": "largeDiagonalLeft"
            }, {
                "name": "largeDiagonalRight"
            }, {
                "name": "largeDiamond"
            }, {
                "name": "largeTriangle"
            }, {
                "name": "smallChecker"
            }, {
                "name": "smallCrosshatch"
            }, {
                "name": "smallDiagonalLeft"
            }, {
                "name": "smallDiagonalRight"
            }, {
                "name": "smallDiamond"
            }, {
                "name": "smallTriangle"
            }]
        }, {
            "name": "pieSliceExplode",
            "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts."
        }, {
            "name": "shortDesc",
            "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corressponding legend item for the series."
        }, {
            "name": "source",
            "description": "The URI of the custom image. If specified, it takes precedence over shape."
        }, {
            "name": "sourceHover",
            "description": "The optional URI for the hover state. If not specified, the source image will be used."
        }, {
            "name": "sourceHoverSelected",
            "description": "The optional URI for the hover selected state. If not specified, the source image will be used."
        }, {
            "name": "sourceSelected",
            "description": "The optional URI for the selected state. If not specified, the source image will be used."
        }, {
            "name": "stackCategory",
            "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaClassName is also specified. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaStyle is also specified.The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "type",
            "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
            "values": [{
                "name": "area"
            }, {
                "name": "auto"
            }, {
                "name": "bar"
            }, {
                "name": "boxPlot"
            }, {
                "name": "candlestick"
            }, {
                "name": "line"
            }, {
                "name": "lineWithArea"
            }]
        }],
        "name": "oj-chart-series",
        "description": "ojChartSeries"
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": " Disabled true disables the component and disables all the inputs/labels. Disabled false enables the component, and leaves the inputs disabled state as it is in the dom. "
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "labelledBy",
            "description": "labelled-by is used to establish a relationship between this component and another element. A common use is to tie the oj-label and the oj-checkboxset together. The oj-label custom element has an id, and you use the labelled-by attribute to tie the two components together."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "optionRenderer",
            "description": "The renderer function that renders the content of each option."
        }, {
            "name": "options",
            "description": "The option items for the Checkboxset."
        }, {
            "name": "optionsKeys",
            "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute."
        }, {
            "name": "readonly",
            "description": "Whether the component is readonly. The readOnly property sets or returns whether an element is readOnly, or not. A readOnly element cannot be modified. However, a user can tab to it, highlight it, focus on it, and copy the text from it. If you want to prevent the user from interacting with the element, use the disabled property instead."
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit required validator is created using the validator factory - oj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator(). Translations specified using the translations.required attribute and the label associated with the component, are passed through to the options parameter of the createValidator method. When required property changes due to programmatic intervention, the component may clears message and run validation, based on the current state it's in. Running Validation if component is valid when required is set to true, then it runs deferred validation on the value property. This is to ensure errors are not flagged unnecessarily. if component is invalid and has deferred messages when required is set to false, then component messages are cleared but no deferred validation is run. if component is invalid and currently showing invalid messages when required is set, then component messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. Clearing Messages Only messages created by the component are cleared. messagesCustom property is not cleared. This property set to false implies that a value is not required to be provided by the user. This is the default. This property set to true implies that a value is required to be provided by user and the input's label will render a required icon. Additionally a required validator - RequiredValidator - is implicitly used if no explicit required validator is set. An explicit required validator can be set by page authors using the validators option. when the option is not set, the element's required property is used as its initial value if it exists."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "The value of the component. When value property changes due to programmatic intervention, the component always clears all messages and runs deferred validation, and always refreshes UI display value. When the option is not set, value is set to an array built from the checked checkboxes, if any are checked. Clearing Messages All messages are cleared. This includes the messagesCustom property. Running Validation component always runs deferred validation "
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-checkboxset",
        "description": "A grouping of related checkboxes where any number of boxes may be checked."
    }, {
        "attributes": [{
            "name": "disabled",
            "description": "Disables the collapsible if set to true."
        }, {
            "name": "expandArea",
            "description": "Where in the header to click to toggle disclosure.",
            "values": [{
                "name": "disclosureIcon"
            }, {
                "name": "header"
            }]
        }, {
            "name": "expanded",
            "description": "Specifies if the content is expanded."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-before-expand",
            "description": "Triggered immediately before the collapsible is expanded."
        }, {
            "name": "on-oj-expand",
            "description": "Triggered immediately after the collapsible is expanded."
        }, {
            "name": "on-oj-before-collapse",
            "description": "Triggered immediately before the collapsible is collapsed."
        }, {
            "name": "on-oj-collapse",
            "description": "Triggered immediately after the collapsible is collapsed."
        }],
        "name": "oj-collapsible",
        "description": "Displays a header that can be expanded to show its content."
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelDisplay",
            "description": "Specifies whether a text label accompanies the color swatch.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "labelledBy",
            "description": "Used to establish a relationship between this element and another element."
        }, {
            "name": "layout",
            "description": "Specifies the layout of the color swatches.",
            "values": [{
                "name": "grid"
            }, {
                "name": "list"
            }]
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "palette",
            "description": "Specifies an array of objects defining the palette's color set."
        }, {
            "name": "swatchSize",
            "description": "Specifies the swatch size.",
            "values": [{
                "name": "lg"
            }, {
                "name": "sm"
            }, {
                "name": "xs"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "The current value of the palette element."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-color-palette",
        "description": "Displays a set of pre-defined colors from which a specific color can be selected."
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "labelledBy",
            "description": "Used to establish a relationship between this element and another element."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "transientValue",
            "description": "Retrieves the transient value of the component."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "Specifies the value of the element representing the current color."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-color-spectrum",
        "description": "Enables a custom color value to be specified from a display containing a saturation/luminosity spectrum, plus hue and opacity sliders."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "Specifies a list of async validators for performing async validation by the element."
        }, {
            "name": "converter",
            "description": "An object to convert value."
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "minLength",
            "description": "The minimum number of characters a user must type before search filtering is performed."
        }, {
            "name": "optionRenderer",
            "description": "The renderer function that renders the content of each option."
        }, {
            "name": "options",
            "description": "The option items for the Combobox."
        }, {
            "name": "optionsKeys",
            "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute."
        }, {
            "name": "pickerAttributes",
            "description": "The style attributes for the drop down."
        }, {
            "name": "placeholder",
            "description": "A short hint that can be displayed before user selects or enters a value."
        }, {
            "name": "rawValue",
            "description": "The currently displayed text retrieved from the input field."
        }, {
            "name": "readonly",
            "description": "Specifies whether a value is readonly"
        }, {
            "name": "required",
            "description": "Specifies whether a value is required."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "Specifies a list of validators for performing validation by the element."
        }, {
            "name": "value",
            "description": "The value of the element."
        }, {
            "name": "valueOptions",
            "description": "The current values of the element and theirs associated display labels."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-combobox-many",
        "description": "A dropdown list that supports multiple selections, text input, and search filtering."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "Specifies a list of async validators for performing async validation by the element."
        }, {
            "name": "converter",
            "description": "An object to convert value."
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "filterOnOpen",
            "description": "Whether to filter the drop down list on open.",
            "values": [{
                "name": "none"
            }, {
                "name": "rawValue"
            }]
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "minLength",
            "description": "The minimum number of characters a user must type before search filtering is performed."
        }, {
            "name": "optionRenderer",
            "description": "The renderer function that renders the content of each option."
        }, {
            "name": "options",
            "description": "The option items for the Combobox."
        }, {
            "name": "optionsKeys",
            "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute."
        }, {
            "name": "pickerAttributes",
            "description": "The style attributes for the drop down."
        }, {
            "name": "placeholder",
            "description": "A short hint that can be displayed before user selects or enters a value."
        }, {
            "name": "rawValue",
            "description": "The currently displayed text retrieved from the input field."
        }, {
            "name": "readonly",
            "description": "Specifies whether a value is readonly"
        }, {
            "name": "required",
            "description": "Specifies whether a value is required."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "Specifies a list of validators for performing validation by the element."
        }, {
            "name": "value",
            "description": "The value of the element."
        }, {
            "name": "valueOption",
            "description": "The current value of the element and its associated display label."
        }, {
            "name": "on-oj-value-updated",
            "description": "Event handler for when the value is submitted by the user."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-combobox-one",
        "description": "A dropdown list that supports single selection, text input, and search filtering."
    }, {
        "attributes": [{
            "name": "contentParent",
            "description": "Specify the selector of the descendant DOM element in the conveyorBelt that directly contains the items to scroll among."
        }, {
            "name": "orientation",
            "description": "Specifies the orientation of the conveyorBelt.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-conveyor-belt",
        "description": "Container element that manages overflow for its child elements and allows scrolling among them."
    }, {
        "attributes": [{
            "name": "bandingInterval",
            "description": "Specifies the data body row and column banding intervals."
        }, {
            "name": "cell",
            "description": "Specifies attributes on the cells."
        }, {
            "name": "currentCell",
            "description": "Specifies the grid's currently focused cell."
        }, {
            "name": "data",
            "description": "Specifies the grid data source."
        }, {
            "name": "dnd",
            "description": "Specifies the drag and drop features."
        }, {
            "name": "editMode",
            "description": "Specifies if the grid is read-only or editable.",
            "values": [{
                "name": "cellEdit"
            }, {
                "name": "cellNavigation"
            }, {
                "name": "none"
            }]
        }, {
            "name": "gridlines",
            "description": "Specifies the visibility of the grid body vertical and horizontal gridlines."
        }, {
            "name": "header",
            "description": "Specifies attributes on the headers."
        }, {
            "name": "scrollPolicy",
            "description": "Specifies the grid scroll mechanism.",
            "values": [{
                "name": "auto"
            }, {
                "name": "loadMoreOnScroll"
            }, {
                "name": "scroll"
            }]
        }, {
            "name": "scrollPolicyOptions",
            "description": "Gets and sets the fetch options for scrolling behaviors that triggers data fetches."
        }, {
            "name": "scrollPosition",
            "description": "Gets and sets the scroll position of the data grid."
        }, {
            "name": "selection",
            "description": "Specifies the grid's current selection."
        }, {
            "name": "selectionMode",
            "description": "Specifies row or cell selection."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-resize",
            "description": "Triggered when a portion of the DataGrid is resized"
        }, {
            "name": "on-oj-sort",
            "description": "Triggered when a sort is performed on the DataGrid"
        }, {
            "name": "on-oj-scroll",
            "description": "Triggered after the DataGrid has been scrolled via the UI or the scrollTo method."
        }, {
            "name": "on-oj-before-current-cell",
            "description": "Triggered before the current cell is changed via the currentCell attribute or via the UI."
        }, {
            "name": "on-oj-before-edit",
            "description": "Triggered before the DataGrid is going to enter edit mode. To prevent editing the cell prevent default on the event."
        }, {
            "name": "on-oj-before-edit-end",
            "description": "Triggered before the DataGrid is going to exit edit mode. To prevent exit editing the prevent default on the event. There is a provided beforeEditEnd function, oj.DataCollectionEditUtils.basicHandleEditEnd, which can be specified. This function will handle canceling edits as well as invoking validation on input elements."
        }],
        "name": "oj-data-grid",
        "description": "Displays data in a cell oriented grid."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "converter",
            "description": "A datetime converter instance that duck types DateTimeConverter. Or an object literal containing the properties listed below. The converter used for InputDate. Page authors can set a custom converter by creating one using the datetime converter factory and providing custom options - oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter(customOptions). \nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n"
        }, {
            "name": "datePicker",
            "description": " Note that Jet framework prohibits setting subset of properties which are object types. For example myInputDate.datePicker = {footerLayout: \"today\"}; is prohibited as it will wipe out all other sub-properties for \"datePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"datePicker\" object, modify the necessary sub-property and pass it to above syntax. Default values for the datePicker sub-properties can also be overridden with the theming variable $inputDateTimeDatePickerOptionDefault, which is merged with other defaults. Note that all of the datePicker sub-properties except showOn are not available when renderMode is 'native'."
        }, {
            "name": "dayFormatter",
            "description": "Additional info to be used when rendering the day This should be a JavaScript Function reference which accepts as its argument the following JSON format {fullYear: Date.getFullYear(), month: Date.getMonth()+1, date: Date.getDate()} and returns null or all or partial JSON data of {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}"
        }, {
            "name": "dayMetaData",
            "description": "Additional info to be used when rendering the day This should be in the following JSON format with the year, month, day based on Date.getFullYear(), Date.getMonth()+1, and Date.getDate(): {year: {month: {day: {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}}} There also exists a special '*' character which represents ALL within that field [i.e. * within year, represents for ALL year]. Note that this property will override the value of the dayFormatter property. Setting both dayFormatter and dayMetaData properties is not supported."
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "keyboardEdit",
            "description": "Determines if keyboard entry of the text is allowed. When the datepicker is inline, the only supported value is \"disabled\".",
            "values": [{
                "name": "disabled"
            }]
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "max",
            "description": "The maximum selectable date (in ISO string format). When set to null, there is no maximum."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "min",
            "description": "The minimum selectable date (ISO string format). When set to null, there is no minimum."
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "pickerAttributes",
            "description": "Attributes specified here will be set on the picker DOM element when it's launched. The supported attributes are class and style, which are appended to the picker's class and style, if any. Note: 1) pickerAttributes is not applied in the native theme. 2) setting this property after element creation has no effect."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "renderMode",
            "description": "Allows applications to specify whether to render date picker in JET or render as a native picker control. In inline mode, the only value supported is \"jet\"",
            "values": [{
                "name": "jet"
            }]
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of validators used by element along with the implicit component validators when performing validation. Each item is either an instance that duck types Validator, or is an Object literal containing the properties listed below. Implicit validators are created by the element when certain attributes are present. For example, if the required attribute is set, an implicit RequiredValidator is created. If the min and/or max attribute is set, an implicit DateTimeRangeValidator is created. If the dayFormatter attribute is set, an implicit DateRestrictionValidator is created. At runtime when the component runs validation, it combines all the implicit validators with all the validators specified through this validators attribute, and runs all of them. Hints exposed by validators are shown in the notewindow by default, or as determined by the 'validatorHint' property set on the displayOptions property. When validators property changes due to programmatic intervention, the element may decide to clear messages and run validation, based on the current state it is in. Steps Performed Always The cached list of validator instances are cleared and new validator hints is pushed to messaging. E.g., notewindow displays the new hint(s). Running Validation if element is valid when validators changes, element does nothing other than the steps it always performs. if element is invalid and is showing messages when validators changes then all element messages are cleared and full validation run using the display value on the element. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors. if element is invalid and has deferred messages when validators changes, it does nothing other than the steps it performs always. Clearing Messages Only messages created by the element are cleared. messagesCustom property is not cleared. "
        }, {
            "name": "value",
            "description": "The value of the DatePicker element which should be an ISOString. When the attribute is not set, the element's value attribute is used as its initial value if it exists. This value must be an ISOString."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-date-picker",
        "description": "An inline element for picking a date value."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "converter",
            "description": "Default converter for InputDateTime\n\nIf one wishes to provide a custom converter for the InputDateTime override the factory returned for\noj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME)\n\nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n"
        }, {
            "name": "datePicker",
            "description": " Note that Jet framework prohibits setting subset of properties which are object types. For example myInputDate.datePicker = {footerLayout: \"today\"}; is prohibited as it will wipe out all other sub-properties for \"datePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"datePicker\" object, modify the necessary sub-property and pass it to above syntax. Default values for the datePicker sub-properties can also be overridden with the theming variable $inputDateTimeDatePickerOptionDefault, which is merged with other defaults. Note that all of the datePicker sub-properties except showOn are not available when renderMode is 'native'."
        }, {
            "name": "dayFormatter",
            "description": "Additional info to be used when rendering the day This should be a JavaScript Function reference which accepts as its argument the following JSON format {fullYear: Date.getFullYear(), month: Date.getMonth()+1, date: Date.getDate()} and returns null or all or partial JSON data of {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}"
        }, {
            "name": "dayMetaData",
            "description": "Additional info to be used when rendering the day This should be in the following JSON format with the year, month, day based on Date.getFullYear(), Date.getMonth()+1, and Date.getDate(): {year: {month: {day: {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}}} There also exists a special '*' character which represents ALL within that field [i.e. * within year, represents for ALL year]. Note that this property will override the value of the dayFormatter property. Setting both dayFormatter and dayMetaData properties is not supported."
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "keyboardEdit",
            "description": "Determines if keyboard entry of the text is allowed.\nWhen the datepicker is inline, the only supported value is \"disabled\".",
            "values": [{
                "name": "disabled"
            }]
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "max",
            "description": "The maximum selectable datetime. When set to null, there is no maximum. type string - ISOString null - no limit\n"
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "min",
            "description": "The minimum selectable date. When set to null, there is no minimum. type string - ISOString null - no limit\n"
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "pickerAttributes",
            "description": "Attributes specified here will be set on the picker DOM element when it's launched. The supported attributes are class and style, which are appended to the picker's class and style, if any. Note: 1) pickerAttributes is not applied in the native theme. 2) setting this property after element creation has no effect."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "renderMode",
            "description": "Allows applications to specify whether to render date picker in JET or\nas a native picker control. In inline mode, the only value supported is \"jet\"",
            "values": [{
                "name": "jet"
            }]
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "timePicker",
            "description": " Note that Jet framework prohibits setting subset of properties which are object types. For example myInputDate.datePicker = {footerLayout: \"today\"}; is prohibited as it will wipe out all other sub-properties for \"datePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"datePicker\" object, modify the necessary sub-property and pass it to above syntax. Default values for the datePicker sub-properties can also be overridden with the theming variable $inputDateTimeDatePickerOptionDefault, which is merged with other defaults. Note that all of the datePicker sub-properties except showOn are not available when renderMode is 'native'."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of validators used by element when performing validation. Each item is either an\ninstance that duck types Validator, or is an Object literal containing the\nproperties listed below.\n\nImplicit validators are created by the element when certain attributes are present.\nFor example, if the required\nattribute is set, an implicit RequiredValidator is created. If the\nmin and/or max attribute\nis set, an implicit DateTimeRangeValidator is created. If the\ndayFormatter attribute is set,\nan implicit DateRestrictionValidator is created.\nAt runtime when the component runs validation, it\ncombines all the implicit validators with all the validators\nspecified through this validators attribute, and runs\nall of them.\n\n\nHints exposed by validators are shown in the notewindow by default, or as determined by the\n'validatorHint' property set on the displayOptions\nproperty.\n\n\n\nWhen validators property changes due to programmatic\nintervention, the element may decide to clear messages and run validation, based on the\ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to\nmessaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when validators changes, element does nothing other than the\nsteps it always performs.\nif element is invalid and is showing messages when\nvalidators changes then all element messages are cleared\nand full validation run using the display value on the element. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif element is invalid and has deferred messages when validators changes, it does\nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\n\n"
        }, {
            "name": "value",
            "description": "The value of the DateTimePicker element which should be an ISOString"
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-date-time-picker",
        "description": "An inline element for picking a date-time value."
    }, {
        "attributes": [],
        "name": "oj-defer",
        "description": "Used to delay applying bindings to its children until it is activated. Child elements are disconnected from the DOM tree until the parent component activates its subtree."
    }, {
        "attributes": [{
            "name": "animationOnDataChange",
            "description": "Specifies the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Specifies the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "as",
            "description": "An alias for the $current context variable when referenced inside nodeTemplate or linkTemplate when using a DataProvider."
        }, {
            "name": "data",
            "description": "Specifies data source for the component."
        }, {
            "name": "dnd",
            "description": "Used to customize the drag and drop features."
        }, {
            "name": "expanded",
            "description": "Specifies the key set of ids for expanded diagram nodes."
        }, {
            "name": "focusRenderer",
            "description": "Specifies custom renderer for the diagram nodes used for focus updates."
        }, {
            "name": "hiddenCategories",
            "description": "Specifies categories used for filtering."
        }, {
            "name": "highlightMatch",
            "description": "Specifies matching condition used for category highlighting.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "Specifies categories used for highlighting."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over diagram nodes and links.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "hoverRenderer",
            "description": "Specifies custom renderer for the diagram nodes used for hover updates."
        }, {
            "name": "layout",
            "description": "Specifies layout callback used to position nodes and links."
        }, {
            "name": "linkData",
            "description": "The oj.DataProvider for the diagram links. It should provide rows where each row corresponds to a single diagram link. The row key will be used as the id for diagram links. Note that when using this attribute, a template for the linkTemplate slot should be provided."
        }, {
            "name": "linkHighlightMode",
            "description": "Defines link highlighting mode.",
            "values": [{
                "name": "link"
            }, {
                "name": "linkAndNodes"
            }]
        }, {
            "name": "linkProperties",
            "description": "Optional callback for customizing link appearance based on link data."
        }, {
            "name": "maxZoom",
            "description": "Specifies the maximum zoom level for this diagram."
        }, {
            "name": "minZoom",
            "description": "Specifies the minimum zoom level for this diagram."
        }, {
            "name": "nodeData",
            "description": "The oj.DataProvider for the diagram nodes. It should provide rows where each row corresponds to a single diagram node. The row key will be used as the id for diagram nodes. Note that when using this attribute, a template for the nodeTemplate slot should be provided."
        }, {
            "name": "nodeHighlightMode",
            "description": "Defines node highlighting mode.",
            "values": [{
                "name": "node"
            }, {
                "name": "nodeAndIncomingLinks"
            }, {
                "name": "nodeAndLinks"
            }, {
                "name": "nodeAndOutgoingLinks"
            }]
        }, {
            "name": "nodeProperties",
            "description": "Optional callback for customizing node appearance based on node data."
        }, {
            "name": "overview",
            "description": "An object, used to define a diagram overview. If not specified, no overview will be shown."
        }, {
            "name": "panDirection",
            "description": "Specifies if panning allowed in horizontal and vertical directions.",
            "values": [{
                "name": "auto"
            }, {
                "name": "x"
            }, {
                "name": "y"
            }]
        }, {
            "name": "panning",
            "description": "Specifies whether panning is allowed in Diagram.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "promotedLinkBehavior",
            "description": "Defines promoted link behavior for the component.",
            "values": [{
                "name": "full"
            }, {
                "name": "lazy"
            }, {
                "name": "none"
            }]
        }, {
            "name": "renderer",
            "description": "Specifies custom renderer for the diagram nodes used for initial rendering."
        }, {
            "name": "selection",
            "description": "An array containing the ids of the selected nodes and links."
        }, {
            "name": "selectionMode",
            "description": "Specifies the selection mode.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "selectionRenderer",
            "description": "Specifies custom renderer for the diagram nodes used for selection updates."
        }, {
            "name": "styleDefaults",
            "description": "An object defining the style defaults for this diagram."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "touchResponse",
            "description": "Specifies touch response behavior.",
            "values": [{
                "name": "auto"
            }, {
                "name": "touchStart"
            }]
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "zoomRenderer",
            "description": "Specifies custom renderer for the diagram nodes used for zoom updates."
        }, {
            "name": "zooming",
            "description": "Specifies whether zooming is allowed in Diagram.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "on-oj-before-expand",
            "description": "Event handler for when a node is about to expand."
        }, {
            "name": "on-oj-expand",
            "description": "Event handler for after a node has expanded."
        }, {
            "name": "on-oj-before-collapse",
            "description": "Event handler for when a node is about to collapse."
        }, {
            "name": "on-oj-collapse",
            "description": "Event handler for after a node has collapsed."
        }],
        "name": "oj-diagram",
        "description": "Displays a set of nodes and the links between them. The node positions and link paths are specified by an application-provided layout function."
    }, {
        "attributes": [{
            "name": "categories",
            "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links. By default, the label is used as the link category."
        }, {
            "name": "color",
            "description": "The link color."
        }, {
            "name": "endConnectorType",
            "description": "Specifies the type of end connector on the link. Can take the name of a built-in shape.",
            "values": [{
                "name": "arrow"
            }, {
                "name": "arrowConcave"
            }, {
                "name": "arrowOpen"
            }, {
                "name": "circle"
            }, {
                "name": "none"
            }, {
                "name": "rectangle"
            }, {
                "name": "rectangleRounded"
            }]
        }, {
            "name": "endNode",
            "description": "Specifies the end node id."
        }, {
            "name": "label",
            "description": "Text used for the link label."
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the diagram link label. The default values come from the CSS classes and varies based on theme."
        }, {
            "name": "selectable",
            "description": "Specifies whether or not the link will be selectable.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "shortDesc",
            "description": "The text that displays in the link's tooltip."
        }, {
            "name": "startConnectorType",
            "description": "Specifies the type of start connector on the link. Can take the name of a built-in shape.",
            "values": [{
                "name": "arrow"
            }, {
                "name": "arrowConcave"
            }, {
                "name": "arrowOpen"
            }, {
                "name": "circle"
            }, {
                "name": "none"
            }, {
                "name": "rectangle"
            }, {
                "name": "rectangleRounded"
            }]
        }, {
            "name": "startNode",
            "description": "Specifies the start node id."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class defining the style of the link."
        }, {
            "name": "svgStyle",
            "description": "The CSS style object defining the style of the link."
        }, {
            "name": "width",
            "description": "The link width in pixels."
        }],
        "name": "oj-diagram-link",
        "description": "ojDiagramLink"
    }, {
        "attributes": [{
            "name": "categories",
            "description": "An array of category strings corresponding to this node. This allows highlighting and filtering of nodes. By default, the label is used as the node category."
        }, {
            "name": "descendantsConnectivity",
            "description": "Indicates whether the specified object contains links that should be discovered in order to display promoted links.",
            "values": [{
                "name": "connected"
            }, {
                "name": "disjoint"
            }, {
                "name": "unknown"
            }]
        }, {
            "name": "icon",
            "description": "Specifies an icon to be used as a graphical element for the node"
        }, {
            "name": "label",
            "description": "Text used for the node label."
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the diagram node label. The default values come from the CSS classes and varies based on theme."
        }, {
            "name": "overview",
            "description": "Specifies overview node shape."
        }, {
            "name": "selectable",
            "description": "Specifies whether or not the node will be selectable.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "shortDesc",
            "description": "The text that displays in the node's tooltip."
        }, {
            "name": "showDisclosure",
            "description": "Determines when to display the expand/collapse button.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }],
        "name": "oj-diagram-node",
        "description": "ojDiagramNode"
    }, {
        "attributes": [{
            "name": "cancelBehavior",
            "description": "Specifies the cancel behavior of the dialog.\nThe default value depends on the theme.\nIn the alta-web theme, the default is \"icon\",\nand in alta-android, alta-ios and alta-windows themes, the\ndefault is \"none\". Note that the cancelBehavior applies to both automatic and user-defined headers.\nSo by default, a user-defined header in the alta-web theme will have a system generated close icon.",
            "values": [{
                "name": "escape"
            }, {
                "name": "icon"
            }, {
                "name": "none"
            }]
        }, {
            "name": "dialogTitle",
            "description": "Specify the title of the dialog. null is the default."
        }, {
            "name": "dragAffordance",
            "description": "Specifies the drag affordance.\nThe default value depends on the theme.\nIn the alta-web theme, the default is \"title-bar\",\nand in alta-android, alta-ios and alta-windows themes, the\ndefault is \"none\".",
            "values": [{
                "name": "none"
            }, {
                "name": "title-bar"
            }]
        }, {
            "name": "initialVisibility",
            "description": "Set the initial visibility of the dialog.",
            "values": [{
                "name": "hide"
            }, {
                "name": "show"
            }]
        }, {
            "name": "modality",
            "description": "Defines the modality of the dialog.",
            "values": [{
                "name": "modal"
            }, {
                "name": "modeless"
            }]
        }, {
            "name": "position",
            "description": "Position object is used to establish the location the dialog will appear relative to\nanother element. ojDialog.Position defines \"my\" alignment \"at\" the alignment\n\"of\" some other thing which can be \"offset\" by so many pixels.\n\nThe \"my\" and \"at\" properties defines aligment points relative to the dialog and other\nelement. The \"my\" property represents the dialog's alignment where the \"at\" property\nrepresents the other element that can be identified by \"of\". The values of these properties\ndescribe horizontal and vertical alignments.\n\n\nDeprecated v3.0.0 jQuery UI position syntax; Use of a percent unit with\n\"my\" or \"at\" is not supported."
        }, {
            "name": "resizeBehavior",
            "description": "Defines the resizeBehavior of the dialog.\nThe default value depends on the theme.\nIn the alta-web theme, the default is \"resizable\",\nand in alta-android, alta-ios and alta-windows themes, the\ndefault is \"none\".",
            "values": [{
                "name": "none"
            }, {
                "name": "resizable"
            }]
        }, {
            "name": "role",
            "description": "The WAI-ARIA role of the dialog. By default, role=\"dialog\" is added to the generated HTML markup that surrounds the dialog.\nWhen used as an alert dialog, the user should set role to \"alertdialog\"."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-before-close",
            "description": "Triggered before the dialog is dismissed via the\nclose() method. The close can be cancelled by calling\nevent.preventDefault()."
        }, {
            "name": "on-oj-before-open",
            "description": "Triggered before the dialog is launched via the open()\nmethod. The open can be cancelled by calling\nevent.preventDefault()."
        }, {
            "name": "on-oj-close",
            "description": "Triggered after the dialog is dismissed via the\nclose() method."
        }, {
            "name": "on-oj-focus",
            "description": "Triggered after focus has been transfered to the dialog."
        }, {
            "name": "on-oj-open",
            "description": "Triggered after the dialog is launched via the open()\nmethod."
        }, {
            "name": "on-oj-resize",
            "description": "Triggered when the dialog is being resized."
        }, {
            "name": "on-oj-resize-start",
            "description": "Triggered when the user starts resizing the dialog."
        }, {
            "name": "on-oj-resize-stop",
            "description": "Triggered when the user stops resizing the dialog."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended, such as when the component is being\nopened/closed or a child item is being added/removed. This event is not triggered if\nthe application has called preventDefault on the animateStart\nevent."
        }],
        "name": "oj-dialog",
        "description": "Displays a popup window that provides information and gathers input from the application user."
    }, {
        "attributes": [{
            "name": "accept",
            "description": "An array of strings of allowed MIME types or file extensions that can be uploaded. If not specified, accept all file types"
        }, {
            "name": "selectOn",
            "description": "The type of event to select the files.",
            "values": [{
                "name": "auto"
            }, {
                "name": "click"
            }, {
                "name": "clickAndDrop"
            }, {
                "name": "drop"
            }]
        }, {
            "name": "selectionMode",
            "description": "Whether to allow single or multiple file selection.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "single"
            }]
        }, {
            "name": "on-oj-select",
            "description": "Triggered after the files are selected"
        }],
        "name": "oj-file-picker",
        "description": "Displays a clickable dropzone for selecting files from the device storage."
    }, {
        "attributes": [{
            "name": "arrowPlacement",
            "description": "Specifies the placement of the navigation arrows.",
            "values": [{
                "name": "adjacent"
            }, {
                "name": "overlay"
            }]
        }, {
            "name": "arrowVisibility",
            "description": "Specifies the visibility of the navigation arrows.",
            "values": [{
                "name": "auto"
            }, {
                "name": "hidden"
            }, {
                "name": "hover"
            }, {
                "name": "visible"
            }]
        }, {
            "name": "currentItem",
            "description": "Specifies the child item whose logical page should be displayed."
        }, {
            "name": "looping",
            "description": "Specifies the navigation looping behavior",
            "values": [{
                "name": "off"
            }, {
                "name": "page"
            }]
        }, {
            "name": "maxItemsPerPage",
            "description": "Specifies the maximum number of child items shown in a logical page."
        }, {
            "name": "orientation",
            "description": "Specifies the orientation of the FilmStrip.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-film-strip",
        "description": "Container element that lays out its children in a single row or column across logical pages and allows navigating through them."
    }, {
        "attributes": [{
            "name": "direction",
            "description": "Specifies the layout direction of the form layout children.",
            "values": [{
                "name": "column"
            }, {
                "name": "row"
            }]
        }, {
            "name": "labelEdge",
            "description": "Specifies how the label is aligned with its editable value component.",
            "values": [{
                "name": "start"
            }, {
                "name": "top"
            }]
        }, {
            "name": "labelWidth",
            "description": "Specifies the label width. This specifies the width of the oj-label elements. This can be any legal CSS width."
        }, {
            "name": "labelWrapping",
            "description": "Specifies if the label text should wrap or truncate.",
            "values": [{
                "name": "truncate"
            }, {
                "name": "wrap"
            }]
        }, {
            "name": "maxColumns",
            "description": "Specifies the maximum number of columns. The actual number of columns may be less, depending on the [direction]ojFormLayout#direction attribute. If direction is \"column\", the layout is responsive and browsers automatically reduce the number of columns to fit the width of the viewport. If direction is \"row\", the number of columns is fixed to the max-columns value. Applications can choose to make it responsive by using ResponsiveKnockoutUtils to adjust the value. See the oj-form-layout - Across demo for an example. "
        }],
        "name": "oj-form-layout",
        "description": "Used to group child elements in an organized layout that can be optimized for multiple display sizes."
    }, {
        "attributes": [{
            "name": "animationOnDataChange",
            "description": "Defines the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Defines the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "as",
            "description": "An alias for the $current context variable passed to slot content for the dependencyTemplate, taskTemplate, or rowTemplate slots."
        }, {
            "name": "axisPosition",
            "description": "The position of the major and minor axis.",
            "values": [{
                "name": "bottom"
            }, {
                "name": "top"
            }]
        }, {
            "name": "dependencies",
            "description": "An array of objects that defines dependencies between tasks. Also accepts a Promise that will resolve with an array for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "dependencyData",
            "description": "The oj.DataProvider for the dependencies of the gantt. It should provide data rows where each row maps data for a single gantt dependency line. The row key will be used as the id for dependency lines. Note that when using this attribute, a template for the dependencyTemplate slot should be provided."
        }, {
            "name": "dnd",
            "description": "Enables drag and drop functionality."
        }, {
            "name": "end",
            "description": "The end time of the Gantt. A valid value is required in order for the Gantt to properly render. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "gridlines",
            "description": "An object specifying whether to display or hide the horizontal and vertical grid lines."
        }, {
            "name": "majorAxis",
            "description": "An object with the following properties, used to define the major time axis. If not specified, no major time axis is shown."
        }, {
            "name": "minorAxis",
            "description": "An object with the following properties, used to define the minor time axis. This is required in order for the Gantt to properly render."
        }, {
            "name": "referenceObjects",
            "description": "The array of reference objects associated with the gantt. For each reference object, a line is rendered at the specified value. Currently only the first reference object in the array is supported. Any additional objects supplied in the array will be ignored."
        }, {
            "name": "rowAxis",
            "description": "An object defining properties for the row labels region."
        }, {
            "name": "rowDefaults",
            "description": "An object with the following properties, used to define default styling for rows in the Gantt."
        }, {
            "name": "rows",
            "description": "An array of objects with the following properties, used to define rows and tasks within rows. Also accepts a Promise that will resolve with an array for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "scrollPosition",
            "description": "The current scroll position of Gantt. The scroll position is updated when the vertical scroll position has changed. The value contains the y scroll position, the index of the row closest to the top of the viewport, and the vertical offset from the position of the row to the actual scroll position. The default value contains just the scroll position. If there is no data then the 'rowIndex' sub-property will not be available. When setting the scrollPosition property, applications can change any combination of the sub-properties. If multiple sub-properties are set at once they will be used in rowIndex, pixel order where the latter serves as hints. If offsetY is specified, it will be used to adjust the scroll position from the position where the index of the row is located. If a sparse object is set the other sub-properties will be populated and updated once Gantt has scrolled to that position. "
        }, {
            "name": "selection",
            "description": "An array of strings containing the ids of the initially selected tasks."
        }, {
            "name": "selectionMode",
            "description": "The type of selection behavior that is enabled on the Gantt. If 'single' is specified, only a single task can be selected at once. If 'multiple', any number of tasks can be selected at once. Otherwise, selection is disabled.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "start",
            "description": "The start time of the Gantt. A valid value is required in order for the Gantt to properly render. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "taskData",
            "description": "The oj.DataProvider for the tasks of the gantt. It should provide data rows where each row maps data for a single gantt task. The row key will be used as the id for gantt tasks. Note that when using this attribute, a template for the taskTemplate slot should be provided. Additionally providing a template for the rowTemplate slot for generating the gantt row properties is optional."
        }, {
            "name": "taskDefaults",
            "description": "An object with the following properties, used to define default styling for tasks in the Gantt. Properties specified on this object may be overridden by specifications on individual tasks."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valueFormats",
            "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to task properties."
        }, {
            "name": "viewportEnd",
            "description": "The end time of the Gantt's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the Gantt. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "viewportStart",
            "description": "The start time of the Gantt's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the Gantt. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "on-oj-viewport-change",
            "description": "Triggered after the viewport is changed due to a zoom or scroll operation."
        }, {
            "name": "on-oj-move",
            "description": "Triggered after tasks are moved to a different location of some row within the gantt via drag and drop or equivalent keyboard actions (See Keyboard End User Information). See also the dnd.move.tasks attribute."
        }],
        "name": "oj-gantt",
        "description": "Displays scheduling information graphically, making it easier to plan, coordinate, and track various tasks and resources."
    }, {
        "attributes": [{
            "name": "predecessorTaskId",
            "description": "The identifier for the predecessor task. This must reference a task in Gantt."
        }, {
            "name": "shortDesc",
            "description": "The description of the dependency line. This is used for accessibility."
        }, {
            "name": "successorTaskId",
            "description": "The identifier for the successor task. This must reference a task in Gantt."
        }, {
            "name": "svgClassName",
            "description": "A space delimited list of CSS style classes to apply to the dependency line."
        }, {
            "name": "svgStyle",
            "description": "The CSS style defining the style of the dependency line."
        }, {
            "name": "type",
            "description": "The type of dependency.",
            "values": [{
                "name": "finishFinish"
            }, {
                "name": "finishStart"
            }, {
                "name": "startFinish"
            }, {
                "name": "startStart"
            }]
        }],
        "name": "oj-gantt-dependency",
        "description": "ojGanttDependency"
    }, {
        "attributes": [{
            "name": "label",
            "description": "The label associated with the row."
        }, {
            "name": "labelStyle",
            "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used."
        }],
        "name": "oj-gantt-row",
        "description": "ojGanttRow"
    }, {
        "attributes": [{
            "name": "baseline",
            "description": "Specifies the baseline of the task.\nWhen only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline."
        }, {
            "name": "borderRadius",
            "description": "The border radius of the task. Accepts values allowed in CSS border-radius attribute.\nThe default value comes from the gantt's [task-defaults.border-radius]ojGantt#taskDefaults.borderRadius."
        }, {
            "name": "end",
            "description": "The end time of this task. Optional if task is a single date event like Milestone.\nEither start or end has to be defined in order for the task to properly render.\nSee [Date and Time Formats]ojGantt#formats-section for more details on the required string formats."
        }, {
            "name": "height",
            "description": "The height of the task in pixels.\nSince row heights can also be set via the gantt's [row-defaults.height]ojGantt#rowDefaults.height attribute,\napplications typically should make sure that their task heights are less than the row height.\nThe default value comes from the gantt's [task-defaults.height]ojGantt#taskDefaults.height."
        }, {
            "name": "label",
            "description": "The label associated with the task."
        }, {
            "name": "labelPosition",
            "description": "The position of the label relative to the task, or a priority order of label positions for the component to automatically choose from.",
            "values": [{
                "name": "end"
            }, {
                "name": "innerCenter"
            }, {
                "name": "innerEnd"
            }, {
                "name": "innerStart"
            }, {
                "name": "none"
            }, {
                "name": "start"
            }]
        }, {
            "name": "labelStyle",
            "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used."
        }, {
            "name": "progress",
            "description": "Specifies the progress of the task. This property is ignored if the task is a milestone."
        }, {
            "name": "rowId",
            "description": "The id for the row the task belongs to."
        }, {
            "name": "shortDesc",
            "description": "The description of the task. This is used for accessibility and for customizing the tooltip text."
        }, {
            "name": "start",
            "description": "The start time of this task. Optional if task is a single date event like Milestone.\nEither start or end has to be defined in order for the task to properly render.\nSee [Date and Time Formats]ojGantt#formats-section for more details on the required string formats."
        }, {
            "name": "svgClassName",
            "description": "A space delimited list of CSS style classes defining the style of the task.\nThe default value comes from the gantt's [task-defaults.svg-class-name]ojGantt#taskDefaults.svgClassName."
        }, {
            "name": "svgStyle",
            "description": "The CSS style defining the style of the task. The default value comes from the gantt's [task-defaults.svg-style]ojGantt#taskDefaults.svgStyle."
        }, {
            "name": "type",
            "description": "Defines the task type to be rendered.\nIf \"milestone\", and if 'start' and 'end' values are specified and unequal, the 'start' value is used to evaluate position.\nIf \"auto\", the type is inferred from the data: If 'start' and 'end' values are specified and unequal, \"normal\" type is assumed. Otherwise, \"milestone\" type is assumed.\n\nThe default value comes from the gantt's [task-defaults.type]ojGantt#taskDefaults.type.",
            "values": [{
                "name": "auto"
            }, {
                "name": "milestone"
            }, {
                "name": "normal"
            }, {
                "name": "summary"
            }]
        }],
        "name": "oj-gantt-task",
        "description": "ojGanttTask"
    }, {
        "attributes": [{
            "name": "data",
            "description": "The data provider for the Indexer."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-indexer",
        "description": "Displays a list of sections that corresponds to group headers of a list."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autocomplete",
            "description": "Dictates component's autocomplete state."
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "converter",
            "description": "A datetime converter instance that duck types DateTimeConverter. Or an object literal containing the properties listed below. The converter used for InputDate. Page authors can set a custom converter by creating one using the datetime converter factory and providing custom options - oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter(customOptions). \nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n"
        }, {
            "name": "datePicker",
            "description": " Note that Jet framework prohibits setting subset of properties which are object types. For example myInputDate.datePicker = {footerLayout: \"today\"}; is prohibited as it will wipe out all other sub-properties for \"datePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"datePicker\" object, modify the necessary sub-property and pass it to above syntax. Default values for the datePicker sub-properties can also be overridden with the theming variable $inputDateTimeDatePickerOptionDefault, which is merged with other defaults. Note that all of the datePicker sub-properties except showOn are not available when renderMode is 'native'."
        }, {
            "name": "dayFormatter",
            "description": "Additional info to be used when rendering the day This should be a JavaScript Function reference which accepts as its argument the following JSON format {fullYear: Date.getFullYear(), month: Date.getMonth()+1, date: Date.getDate()} and returns null or all or partial JSON data of {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}"
        }, {
            "name": "dayMetaData",
            "description": "Additional info to be used when rendering the day This should be in the following JSON format with the year, month, day based on Date.getFullYear(), Date.getMonth()+1, and Date.getDate(): {year: {month: {day: {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}}} There also exists a special '*' character which represents ALL within that field [i.e. * within year, represents for ALL year]. Note that this property will override the value of the dayFormatter property. Setting both dayFormatter and dayMetaData properties is not supported."
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "keyboardEdit",
            "description": "Determines if keyboard entry of the text is allowed. When disabled the picker must be used to select a date. Default value depends on the theme. In alta-android, alta-ios and alta-windows themes, the default is \"disabled\" and it's \"enabled\" for alta web theme.",
            "values": [{
                "name": "disabled"
            }, {
                "name": "enabled"
            }]
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "max",
            "description": "The maximum selectable date (ISO string). When set to null, there is no maximum."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "min",
            "description": "The minimum selectable date (in ISO string format). When set to null, there is no minimum."
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "pickerAttributes",
            "description": "Attributes specified here will be set on the picker DOM element when it's launched. The supported attributes are class and style, which are appended to the picker's class and style, if any. Note: 1) pickerAttributes is not applied in the native theme. 2) setting this property after element creation has no effect."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "renderMode",
            "description": "Allows applications to specify whether to render date picker in JET or as a native picker control. Default value depends on the theme. In alta-android, alta-ios and alta-windows themes, the default is \"native\" and it's \"jet\" for alta web theme.",
            "values": [{
                "name": "jet"
            }, {
                "name": "native"
            }]
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of validators used by element along with the implicit component validators when performing validation. Each item is either an instance that duck types Validator, or is an Object literal containing the properties listed below. Implicit validators are created by the element when certain attributes are present. For example, if the required attribute is set, an implicit RequiredValidator is created. If the min and/or max attribute is set, an implicit DateTimeRangeValidator is created. If the dayFormatter attribute is set, an implicit DateRestrictionValidator is created. At runtime when the component runs validation, it combines all the implicit validators with all the validators specified through this validators attribute, and runs all of them. Hints exposed by validators are shown in the notewindow by default, or as determined by the 'validatorHint' property set on the displayOptions property. When validators property changes due to programmatic intervention, the element may decide to clear messages and run validation, based on the current state it is in. Steps Performed Always The cached list of validator instances are cleared and new validator hints is pushed to messaging. E.g., notewindow displays the new hint(s). Running Validation if element is valid when validators changes, element does nothing other than the steps it always performs. if element is invalid and is showing messages when validators changes then all element messages are cleared and full validation run using the display value on the element. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors. if element is invalid and has deferred messages when validators changes, it does nothing other than the steps it performs always. Clearing Messages Only messages created by the element are cleared. messagesCustom property is not cleared. "
        }, {
            "name": "value",
            "description": "The value of the InputDate element which should be an ISOString. When the attribute is not set, the element's value attribute is used as its initial value if it exists. This value must be an ISOString."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-input-date",
        "description": "Provides basic support for specifying a date value."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autocomplete",
            "description": "Dictates component's autocomplete state."
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "converter",
            "description": "Default converter for InputDateTime\n\nIf one wishes to provide a custom converter for the InputDateTime override the factory returned for\noj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME)\n\nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n"
        }, {
            "name": "datePicker",
            "description": " Note that Jet framework prohibits setting subset of properties which are object types. For example myInputDate.datePicker = {footerLayout: \"today\"}; is prohibited as it will wipe out all other sub-properties for \"datePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"datePicker\" object, modify the necessary sub-property and pass it to above syntax. Default values for the datePicker sub-properties can also be overridden with the theming variable $inputDateTimeDatePickerOptionDefault, which is merged with other defaults. Note that all of the datePicker sub-properties except showOn are not available when renderMode is 'native'."
        }, {
            "name": "dayFormatter",
            "description": "Additional info to be used when rendering the day This should be a JavaScript Function reference which accepts as its argument the following JSON format {fullYear: Date.getFullYear(), month: Date.getMonth()+1, date: Date.getDate()} and returns null or all or partial JSON data of {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}"
        }, {
            "name": "dayMetaData",
            "description": "Additional info to be used when rendering the day This should be in the following JSON format with the year, month, day based on Date.getFullYear(), Date.getMonth()+1, and Date.getDate(): {year: {month: {day: {disabled: true|false, className: \"additionalCSS\", tooltip: 'Stuff to display'}}} There also exists a special '*' character which represents ALL within that field [i.e. * within year, represents for ALL year]. Note that this property will override the value of the dayFormatter property. Setting both dayFormatter and dayMetaData properties is not supported."
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "keyboardEdit",
            "description": "Determines if keyboard entry of the text is allowed. When disabled the picker must be used to select a date. Default value depends on the theme. In alta-android, alta-ios and alta-windows themes, the default is \"disabled\" and it's \"enabled\" for alta web theme.",
            "values": [{
                "name": "disabled"
            }, {
                "name": "enabled"
            }]
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "max",
            "description": "The maximum selectable datetime. When set to null, there is no maximum. type string - ISOString null - no limit\n"
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "min",
            "description": "The minimum selectable date. When set to null, there is no minimum. type string - ISOString null - no limit\n"
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "pickerAttributes",
            "description": "Attributes specified here will be set on the picker DOM element when it's launched. The supported attributes are class and style, which are appended to the picker's class and style, if any. Note: 1) pickerAttributes is not applied in the native theme. 2) setting this property after element creation has no effect."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "renderMode",
            "description": "Allows applications to specify whether to render date and time pickers\nin JET or as a native picker control.\n\nValid values: jet, native\n\nDefault value depends on the theme. In alta-android, alta-ios and alta-windows themes, the\ndefault is \"native\" and it's \"jet\" for alta web theme. jet - Applications get full JET functionality. native - Applications get the functionality of the native picker. Note that the native picker support is limited to Cordova plugin published at 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker'. With native renderMode, the functionality that is sacrificed compared to jet renderMode are: Date and time pickers cannot be themed Accessibility is limited to what the native picker supports pickerAttributes is not applied Sub-IDs are not available hide() and hideTimePicker() functions are no-op translations sub properties pertaining to the picker is not available All of the 'datepicker' sub-properties except 'showOn' are not available 'timePicker.timeIncrement' property is limited to iOS and will only take a precision of minutes \n",
            "values": [{
                "name": "jet"
            }, {
                "name": "native"
            }]
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "timePicker",
            "description": "\nNote that Jet framework prohibits setting subset of properties which are object types.\nFor example myInputDateTime.timePicker = {timeIncrement: \"00:30:00:00\"}; is prohibited as it will\nwipe out all other sub-properties for \"timePicker\" object. If one wishes to do this [by above syntax or knockout] one\nwill have to get the \"timePicker\" object, modify the necessary sub-property and pass it to above syntax.\n"
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of validators used by element when performing validation. Each item is either an\ninstance that duck types Validator, or is an Object literal containing the\nproperties listed below.\n\nImplicit validators are created by the element when certain attributes are present.\nFor example, if the required\nattribute is set, an implicit RequiredValidator is created. If the\nmin and/or max attribute\nis set, an implicit DateTimeRangeValidator is created. If the\ndayFormatter attribute is set,\nan implicit DateRestrictionValidator is created.\nAt runtime when the component runs validation, it\ncombines all the implicit validators with all the validators\nspecified through this validators attribute, and runs\nall of them.\n\n\nHints exposed by validators are shown in the notewindow by default, or as determined by the\n'validatorHint' property set on the displayOptions\nproperty.\n\n\n\nWhen validators property changes due to programmatic\nintervention, the element may decide to clear messages and run validation, based on the\ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to\nmessaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when validators changes, element does nothing other than the\nsteps it always performs.\nif element is invalid and is showing messages when\nvalidators changes then all element messages are cleared\nand full validation run using the display value on the element. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif element is invalid and has deferred messages when validators changes, it does\nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\n\n"
        }, {
            "name": "value",
            "description": "The value of the InputDateTime element which should be an ISOString"
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-input-date-time",
        "description": "Provides basic support for specifying a date-time value."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. Otherwise, use validators, which are synchronous. Each item in the Array is an instance that duck types AsyncValidator. Implicit validators created by a component when certain attributes are present (e.g. required attribute) are separate from validators specified through the async-validators attribute and the validators attribute. At runtime when the component runs validation, it combines the implicit validators with the list specified through the validators attribute and also the list specified through the async-validators attribute. Error messages are shown as soon as each async validator returns; we do not wait until all the async validators finish to show errors. If the component's valid state changes for the worse, it is also updated as each validator returns so valid will be invalidShown as soon as the first validator has an Error. It is recommended that you show the value you are validating in the error message because if the async operation takes a while, the user could be typing in a new value when the error message comes back and might be confused what value the error is for. However, if the user enters a new value (like presses Enter or Tab), a new validation lifecycle will start and validation errors for the previous value will not be shown to the user. If you need to format the value for the error message, you can use oj.IntlConverterUtils.getConverterInstance(converterOption) to get the converter instance, then call converter.format(value). Hints exposed by async-validators and validators are shown in the notewindow by default, or as determined by the 'validatorHint' property set on the display-options attribute. Since async validators are run asynchronously, you should wait on the BusyContext before you check valid property or the value property. Alternatively you can add a callback to the onValidChanged or ojValueChanged events. The steps performed always, running validation and clearing messages is the same as for the ojInputNumber#validators attribute. "
        }, {
            "name": "autocomplete",
            "description": "Dictates component's autocomplete state."
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true then the associated component will get input focus when the page is loaded. Setting this property doesn't set the focus to the component: it tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "converter",
            "description": "A number converter instance that duck types NumberConverter. Or an object literal containing the properties listed below. When no converter is specified, the default converter will be used, and default option of \"numeric\" is used. When converter property changes due to programmatic intervention, the component performs various tasks based on the current state it is in. When initialized with no options, the default options for the current locale are assumed. Steps Performed Always Any cached converter instance is cleared and new converter created. The converter hint is pushed to messaging. E.g., notewindow displays the new hint(s). Running Validation if component is valid when converter property changes, the display value is refreshed. if component is invalid and is showing messages when converter property changes, then all messages generated by the component are cleared and full validation run using its current display value. if there are validation errors, then value property is not updated, and the errors are shown. The display value is not refreshed in this case. if no errors result from the validation, value property is updated; page author can listen to the valueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter. if component is invalid and has deferred messages when converter property changes, then the display value is refreshed with the formatted value provided by converter. Clearing Messages messages created by the component are cleared. messagesCustom property is not cleared. Page authors can choose to clear it explicitly when setting the converter property. "
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "max",
            "description": "The maximum allowed value. This number is used in the range validator; if the value is greater than the max, then the range validator flags an error to the user. The up arrow is disabled when the maximum value is reached. Max must be a number or null; null indicates no maximum. The max must not be less than the min, else an Error is thrown during initialization."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "min",
            "description": "The minimum allowed value. This number is used in the range validator; if the value is less than the min, then the range validator flags an error to the user. The down arrow is disabled when the minimum value is reached. Min must be a number or null; null indicates no minimum. The max must not be less than the min, else an Error is thrown during initialization."
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving the current value from the input field in string form. The main consumer of rawValue is a converter. The rawValue updates on the 'input' javascript event, so the rawValue changes as the value of the input is changed. If the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2', ..., and finally '1,200'. Then when the user blurs or presses Enter the value property gets updated. This is a read-only property so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Whether the component is readonly."
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit required validator is created using the validator factory - oj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator(). Translations specified using the translations.required attribute and the label associated with the component, are passed through to the options parameter of the createValidator method. When required property changes due to programmatic intervention, the component may clear messages and run validation, based on the current state it's in. Running Validation if component is valid when required is set to true, then it runs deferred validation on the value property. This is to ensure errors are not flagged unnecessarily. if component is invalid and has deferred messages when required is set to false, then component messages are cleared but no deferred validation is run. if component is invalid and currently showing invalid messages when required is set, then component messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors. Clearing Messages Only messages created by the component are cleared. messagesCustom property is not cleared. This property set to false implies that a value is not required to be provided by the user. This is the default. This property set to true implies that a value is required to be provided by user and the input's label will render a required icon. Additionally a required validator - RequiredValidator - is implicitly used if no explicit required validator is set. An explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "step",
            "description": "The size of the step to take when spinning via buttons or via the stepUp()/stepDown() methods. Step must be a number greater than 0, otherwise an exception is thrown. It defaults to 1. The step up and step down feature will change the value to be a step match if it isn't already. A step match is when the value is a multiple of step, starting at the min, and if min is not set, then starting at the initial value, and if neither min or initial value are set, then starting at 0. For example, if the value is 5, min is 0, and step is 100, stepUp will change value to be 100. Now if the value is 5, min is -20, and step is 100, stepUp will change the value to be 80. If the min is not set, and the initial value is 5 and the step is 100, then the stepUp will change the value to be 105. A value can be a step mismatch; if the value is set to be a step mismatch, it will not be flagged as a validation error."
        }, {
            "name": "transientValue",
            "description": "The transientValue is the read-only attribute for retrieving the transient value from the component. The transientValue updates to display the transient changes from pressing the up or down arrow (subject to the step constraints). The difference in behavior is transientValue will be updated as the up or down arrow is pressed, whereas value is updated only after the up or down arrow is released. This is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of synchronous validators used by component along with asynchronous validators and the implicit component validators when performing validation. Each item is either an instance that duck types Validator, or is an Object literal containing the properties listed below. Implicit validators are created by the element when certain attributes are present. For example, if the required attribute is set, an implicit RequiredValidator is created. If the min and/or max attribute is set, an implicit NumberRangeValidator is created. At runtime when the component runs validation, it combines all the implicit validators with all the validators specified through this validators attribute and the async-validators attribute, and runs all of them. Hints exposed by validators are shown in the notewindow by default, or as determined by the 'validatorHint' property set on the display-options attribute. When validators property changes due to programmatic intervention, the component may decide to clear messages and run validation, based on the current state it is in. Steps Performed Always The cached list of validator instances are cleared and new validator hints are pushed to messaging. E.g., notewindow displays the new hint(s). Running Validation if component is valid when validators changes, component does nothing other than the steps it always performs. if component is invalid and is showing messages when validators or async-validators changes then all component messages are cleared and full validation run using the display value on the component. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors. if component is invalid and has deferred messages when validators changes, it does nothing other than the steps it performs always. Clearing Messages Only messages created by the component are cleared. messagesCustom property is not cleared. "
        }, {
            "name": "value",
            "description": "The value of the component. Value must be a number or null. When value property changes due to programmatic intervention, the component always clears all messages including messagesCustom, runs deferred validation, and always refreshes UI display value. Running Validation component always runs deferred validation; if there is a validation error the valid property is updated. "
        }, {
            "name": "virtualKeyboard",
            "description": "The type of virtual keyboard to display for entering value on mobile browsers. This attribute has no effect on desktop browsers.",
            "values": [{
                "name": "auto"
            }, {
                "name": "number"
            }, {
                "name": "text"
            }]
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-input-number",
        "description": "Provides basic support for specifying a number value."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autocomplete",
            "description": "Dictates component's autocomplete state."
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of synchronous validators used by component along with asynchronous validators\nand the implicit component validators when performing validation. Each item is either an\ninstance that duck types Validator, or is an Object literal containing the\nproperties listed below.\n\nImplicit validators are created by the element when certain attributes are present.\nFor example, if the required attribute\nis set, an implicit RequiredValidator is created.\nAt runtime when the component runs validation, it\ncombines all the implicit validators with all the validators\nspecified through this validators attribute\nand the async-validators attribute, and\nruns all of them.\n\n\nHints exposed by validators are shown in the notewindow by default, or as determined by the\n'validatorHint' property set on the display-options\nattribute.\n\n\n\nWhen validators property changes due to programmatic\nintervention, the component may decide to clear messages and run validation, based on the\ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to\nmessaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif component is valid when validators changes, component does nothing other than the\nsteps it always performs.\nif component is invalid and is showing messages when\nvalidators or\nasync-validators changes then all component messages are cleared and full validation run using the display value on the component. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when validators changes, it does\nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n"
        }, {
            "name": "value",
            "description": "The value of the component. Value must be a string or null.\n\n\nWhen value property changes due to programmatic\nintervention, the component always clears all messages\nincluding messagesCustom, runs deferred validation, and\nalways refreshes UI display value.\n\nRunning Validation\n\ncomponent always runs deferred validation; if there is a validation error the\nvalid property is updated.\n\n"
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-input-password",
        "description": "Provides basic support for specifying a text value of type 'password'."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autocomplete",
            "description": "Dictates component's autocomplete state."
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "clearIcon",
            "description": "Specifies if the clear icon should be visible.",
            "values": [{
                "name": "always"
            }, {
                "name": "conditional"
            }, {
                "name": "never"
            }]
        }, {
            "name": "converter",
            "description": "a converter instance that duck types Converter. Or an object literal containing the following properties. \nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n"
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "list",
            "description": "Indicates a list of pre-defined options to suggest to the user. The value must be the id of a <datalist> element in the same page. This attribute is ignored when the type attribute's value is hidden."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of synchronous validators used by component along with asynchronous validators\nand the implicit component validators when performing validation. Each item is either an\ninstance that duck types Validator, or is an Object literal containing the\nproperties listed below.\n\nImplicit validators are created by the element when certain attributes are present.\nFor example, if the required attribute\nis set, an implicit RequiredValidator is created.\nAt runtime when the component runs validation, it\ncombines all the implicit validators with all the validators\nspecified through this validators attribute\nand the async-validators attribute, and\nruns all of them.\n\n\nHints exposed by validators are shown in the notewindow by default, or as determined by the\n'validatorHint' property set on the display-options\nattribute.\n\n\n\nWhen validators property changes due to programmatic\nintervention, the component may decide to clear messages and run validation, based on the\ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to\nmessaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif component is valid when validators changes, component does nothing other than the\nsteps it always performs.\nif component is invalid and is showing messages when\nvalidators or\nasync-validators changes then all component messages are cleared and full validation run using the display value on the component. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when validators changes, it does\nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n"
        }, {
            "name": "value",
            "description": "The value of the editablevalue component"
        }, {
            "name": "virtualKeyboard",
            "description": "The type of virtual keyboard to display for entering value on mobile browsers. This attribute has no effect on desktop browsers.",
            "values": [{
                "name": "auto"
            }, {
                "name": "email"
            }, {
                "name": "number"
            }, {
                "name": "search"
            }, {
                "name": "tel"
            }, {
                "name": "text"
            }, {
                "name": "url"
            }]
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-input-text",
        "description": "Provides basic support for specifying a text value."
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autocomplete",
            "description": "Dictates component's autocomplete state."
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "converter",
            "description": "Default converter for InputTime If one wishes to provide a custom converter for the InputTime override the factory returned for oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME) \nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n"
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "keyboardEdit",
            "description": "Determines if keyboard entry of the text is allowed. When disabled the picker must be used to select a time. Default value depends on the theme. In alta-android, alta-ios and alta-windows themes, the default is \"disabled\" and it's \"enabled\" for alta web theme.",
            "values": [{
                "name": "disabled"
            }, {
                "name": "enabled"
            }]
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "max",
            "description": "The maximum selectable time. When set to null, there is no maximum. type string - ISOString null - no limit "
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "min",
            "description": "The minimum selectable time. When set to null, there is no minimum. type string - ISOString null - no limit "
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "pickerAttributes",
            "description": "Attributes specified here will be set on the picker DOM element when it's launched. The supported attributes are class and style, which are appended to the picker's class and style, if any. Note: 1) pickerAttributes is not applied in the native theme. 2) setting this property after element creation has no effect."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "renderMode",
            "description": "Allows applications to specify whether to render time picker in JET or as a native picker control. Default value depends on the theme. In alta-android, alta-ios and alta-windows themes, the default is \"native\" and it's \"jet\" for alta web theme.",
            "values": [{
                "name": "jet"
            }, {
                "name": "native"
            }]
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "timePicker",
            "description": "Note that Jet framework prohibits setting subset of properties which are object types. For example myInputTime.timePicker = {timeIncrement: \"00:30:00:00\"}; is prohibited as it will wipe out all other sub-properties for \"timePicker\" object. If one wishes to do this [by above syntax or knockout] one will have to get the \"timePicker\" object, modify the necessary sub-property and pass it to above syntax. Note that when renderMode is 'native', the only timePicker sub-properties available are showOn and, to a limited extent, timeIncrement."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of validators used by element along with the implicit component validators when performing validation. Each item is either an instance that duck types Validator, or is an Object literal containing the properties listed below. Implicit validators are created by the element when certain attributes are present. For example, if the required attribute is set, an implicit RequiredValidator is created. If the min and/or max attribute is set, an implicit DateTimeRangeValidator may be created. At runtime when the component runs validation, it combines all the implicit validators with all the validators specified through this validators attribute, and runs all of them. Hints exposed by validators are shown in the notewindow by default, or as determined by the 'validatorHint' property set on the displayOptions property. When validators property changes due to programmatic intervention, the element may decide to clear messages and run validation, based on the current state it is in. Steps Performed Always The cached list of validator instances are cleared and new validator hints is pushed to messaging. E.g., notewindow displays the new hint(s). Running Validation if element is valid when validators changes, element does nothing other than the steps it always performs. if element is invalid and is showing messages when validators changes then all element messages are cleared and full validation run using the display value on the element. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors. if element is invalid and has deferred messages when validators changes, it does nothing other than the steps it performs always. Clearing Messages Only messages created by the element are cleared. messagesCustom property is not cleared. "
        }, {
            "name": "value",
            "description": "The value of the InputTime which should be an ISOString."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-input-time",
        "description": "Provides basic support for specifying a time value."
    }, {
        "attributes": [{
            "name": "for",
            "description": "\nThe for attribute refers to the id of the\nelement this oj-label element is associated with.\nSome JET form components support using oj-label's for attribute to point to its id attribute\n(e.g., oj-input-text, oj-slider), and others do not (e.g., oj-checkboxset).\n\nFor the oj-radioset, oj-checkboxset, oj-color-palette, and oj-color-spectrum components,\ninstead of the for attribute, use the\nid attribute on oj-label\nwith JET's form element's labelled-by attribute.\n\n\nRefer to the JET's form element's documentation for more examples showing the\nuse of for/id\nand the use of id/labelled-by.\n"
        }, {
            "name": "help",
            "description": "The help information that goes on the oj-label. The help attributes are:\n\ndefinition - this is the help definition text.\nIt is what shows up\nwhen the user hovers over the help icon, or tabs into the help icon, or press\nand holds the help icon on a mobile device. No formatted text is available for\nhelp definition attribute.\nsource - this is the help source url.\nIf present, a help icon will\nrender next to the label. For security reasons we only support urls with protocol http: or https:.\nIf the url doesn't comply we ignore it and throw an error.\nPass in an encoded URL since we do not encode the URL.\n"
        }, {
            "name": "labelId",
            "description": "label-id sets the id\nattribute on the internal label element. The use case where this may be needed\nis if you are using a <div aria-labelledby>\nand for accessibility reasons you need to point to the\noj-label's label\nelement. This should be a corner case. Most often you'd use oj-label's\nfor attribute to\nassociate with a form component's id attribute or use oj-label's\nid attribute to\nassociate with a JET form component's labelled-by attribute."
        }, {
            "name": "showRequired",
            "description": "Whether this label should have a required icon. It is recommended that you\nbind the show-required attribute to the same binding\nas the required attribute on the\nassociated JET form component to make sure they are in sync."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-label",
        "description": "Provides support for 'required' and 'help' icons on form field labels."
    }, {
        "attributes": [{
            "name": "colspan",
            "description": "Specifies how many columns this label/value pair will occupy in the parent oj-form-layout.\nThis attribute only has an effect if the parent oj-form-layout has direction=\"row\".\nIf there are fewer columns left in the current row than the colspan value specified, then the remaining available columns will be used.\nBy default, the label portion will occupy the same location and width as the label portion of any other label-value pairs, and the value portion will extend over the remaining columns. The default location and width can be changed with the label-edge and label-width attributes on the oj-label-value, respectively.\nIf a percentage is specified for label-width, it is relative to all columns the element occupy. For example, if colspan is 2 and label-width is set to 50%, the label portion will occupy 1 column, and the value portion will occupy 1 column."
        }, {
            "name": "labelEdge",
            "description": "Specifies how the label is aligned with its value component.\nIf the value is 'inherit', it will inherit label-edge from its closest custom element ancestor element. If the ancestor doesn't have a label-width attribute, the default is \"top\".",
            "values": [{
                "name": "inherit"
            }, {
                "name": "start"
            }, {
                "name": "top"
            }]
        }, {
            "name": "labelWidth",
            "description": "Specifies the label width.\nThis can be any legal CSS width or 'inherit',\nwhich will inherit label-width from its closest custom element ancestor element. If the value is \"inherit\" and ancestor doesn't have a label-width attribute, the default is \"33%\"."
        }],
        "name": "oj-label-value",
        "description": "Used to specify label element(s) and value element(s) in a single layout element."
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme."
        }, {
            "name": "color",
            "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme."
        }, {
            "name": "label",
            "description": "An object defining the label."
        }, {
            "name": "max",
            "description": "The maximum value of the gauge."
        }, {
            "name": "metricLabel",
            "description": "An object defining the value label."
        }, {
            "name": "min",
            "description": "The minimum value of the gauge."
        }, {
            "name": "rotation",
            "description": "The rotation angle for the gauge. Useful for changing the direction of triangle or arrow gauges.",
            "values": [{
                "name": "0"
            }, {
                "name": "180"
            }, {
                "name": "270"
            }, {
                "name": "90"
            }]
        }, {
            "name": "size",
            "description": "Fraction of area to use. Values range from 0 to 1."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the gauge. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the gauge. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "thresholds",
            "description": "An array of objects with the following properties defining the thresholds for the gauge."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "type",
            "description": "The shape of the LED gauge. Can take the name of a built-in shape or the svg path commands for a custom shape.",
            "values": [{
                "name": "arrow"
            }, {
                "name": "circle"
            }, {
                "name": "diamond"
            }, {
                "name": "human"
            }, {
                "name": "rectangle"
            }, {
                "name": "square"
            }, {
                "name": "star"
            }, {
                "name": "triangle"
            }]
        }, {
            "name": "value",
            "description": "The metric value."
        }, {
            "name": "visualEffects",
            "description": "Defines whether visual effects such as overlays are applied to the gauge.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }],
        "name": "oj-led-gauge",
        "description": "Displays information graphically, highlighting a specific metric value in relation to its thresholds."
    }, {
        "attributes": [{
            "name": "as",
            "description": "An alias for the $current context variable passed to slot content for the nodeTemplate slot."
        }, {
            "name": "data",
            "description": "The oj.DataProvider for the sections and items of the legend. It should provide a data tree where each node in the data tree corresponds to a section or item in the legend. Nodes that are leaves will be treated as items. The row key will be used as the id for legend sections and items. Note that when using this attribute, a template for the itemTemplate and optionally sectionTemplate slots should be provided."
        }, {
            "name": "drilling",
            "description": "Whether drilling is enabled on all legend items. Drillable objects will show a pointer cursor on hover and fire ojDrill event on click. To enable or disable drilling on individual legend item, use the drilling attribute in each legend item.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "expanded",
            "description": "Specifies the key set containing the ids of sections that should be expanded on initial render. Use the ExpandedKeySet class to specify sections to expand. Use the ExpandAllKeySet class to expand all sections. By default, all sections are expanded."
        }, {
            "name": "halign",
            "description": "Defines the horizontal alignment of the legend contents.",
            "values": [{
                "name": "center"
            }, {
                "name": "end"
            }, {
                "name": "start"
            }]
        }, {
            "name": "hiddenCategories",
            "description": "An array of categories that will be hidden."
        }, {
            "name": "hideAndShowBehavior",
            "description": "Defines whether the legend can be used to initiate hide and show behavior on referenced data items.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of categories that will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over a legend item.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "hoverBehaviorDelay",
            "description": "Specifies initial hover delay in ms for highlighting items in legend."
        }, {
            "name": "orientation",
            "description": "Defines the orientation of the legend, which determines the direction in which the legend items are laid out.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "scrolling",
            "description": "Defines whether scrolling is enabled for the legend.",
            "values": [{
                "name": "asNeeded"
            }, {
                "name": "off"
            }]
        }, {
            "name": "sections",
            "description": "An array of objects with the following properties defining the legend sections."
        }, {
            "name": "symbolHeight",
            "description": "The height of the legend symbol (line or marker) in pixels. If the value is 0, it will take the same value as symbolWidth. If both symbolWidth and symbolHeight are 0, then it will use a default value that may vary based on theme."
        }, {
            "name": "symbolWidth",
            "description": "The width of the legend symbol (line or marker) in pixels. If the value is 0, it will take the same value as symbolWidth. If both symbolWidth and symbolHeight are 0, then it will use a default value that may vary based on theme."
        }, {
            "name": "textStyle",
            "description": "The CSS style object defining the style of the legend item text. The default value comes from the CSS and varies based on theme."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valign",
            "description": "Defines the vertical alignment of the legend contents.",
            "values": [{
                "name": "bottom"
            }, {
                "name": "middle"
            }, {
                "name": "top"
            }]
        }, {
            "name": "on-oj-drill",
            "description": "Triggered during a drill gesture (single click on the legend item)."
        }],
        "name": "oj-legend",
        "description": "Displays an interactive description of symbols, colors, etc., used in graphical information representations."
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\"."
        }, {
            "name": "categories",
            "description": "An array of categories for the legend item. Legend items currently only support a single category. If no category is specified, this defaults to the id or text of the legend item."
        }, {
            "name": "categoryVisibility",
            "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
            "values": [{
                "name": "hidden"
            }, {
                "name": "visible"
            }]
        }, {
            "name": "color",
            "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color."
        }, {
            "name": "drilling",
            "description": "Whether drilling is enabled on the legend item. Drillable objects will show a pointer cursor on hover and fire ojDrill event on click. To enable drilling for all legend items at once, use the drilling attribute in the top level.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "lineStyle",
            "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
            "values": [{
                "name": "dashed"
            }, {
                "name": "dotted"
            }, {
                "name": "solid"
            }]
        }, {
            "name": "lineWidth",
            "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\"."
        }, {
            "name": "markerColor",
            "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\"."
        }, {
            "name": "markerShape",
            "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified."
        }, {
            "name": "markerSvgClassName",
            "description": "The CSS style class to apply to the marker. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the markerColor attribute."
        }, {
            "name": "markerSvgStyle",
            "description": "The inline style to apply to the marker. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the markerColor attribute."
        }, {
            "name": "pattern",
            "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
            "values": [{
                "name": "largeChecker"
            }, {
                "name": "largeCrosshatch"
            }, {
                "name": "largeDiagonalLeft"
            }, {
                "name": "largeDiagonalRight"
            }, {
                "name": "largeDiamond"
            }, {
                "name": "largeTriangle"
            }, {
                "name": "none"
            }, {
                "name": "smallChecker"
            }, {
                "name": "smallCrosshatch"
            }, {
                "name": "smallDiagonalLeft"
            }, {
                "name": "smallDiagonalRight"
            }, {
                "name": "smallDiamond"
            }, {
                "name": "smallTriangle"
            }]
        }, {
            "name": "shortDesc",
            "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text."
        }, {
            "name": "source",
            "description": "The URI of the image of the legend symbol."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the legend item. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the legend item. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "symbolType",
            "description": "The type of legend symbol to display.",
            "values": [{
                "name": "image"
            }, {
                "name": "line"
            }, {
                "name": "lineWithMarker"
            }, {
                "name": "marker"
            }]
        }, {
            "name": "text",
            "description": "The legend item text."
        }],
        "name": "oj-legend-item",
        "description": "ojLegendItem"
    }, {
        "attributes": [{
            "name": "collapsible",
            "description": "Whether the section is collapsible. Only applies if the legend orientation is vertical.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "text",
            "description": "The title of the legend section."
        }, {
            "name": "textHalign",
            "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
            "values": [{
                "name": "center"
            }, {
                "name": "end"
            }, {
                "name": "start"
            }]
        }, {
            "name": "textStyle",
            "description": "The CSS style object defining the style of the section title."
        }],
        "name": "oj-legend-section",
        "description": "ojLegendSection"
    }, {
        "attributes": [{
            "name": "as",
            "description": "Gets and sets the alias for the current item when referenced inside the item template."
        }, {
            "name": "currentItem",
            "description": "Gets and sets the key of the item that should have keyboard focus."
        }, {
            "name": "data",
            "description": "Gets and sets the data provider for this list."
        }, {
            "name": "dnd",
            "description": "Customize the drag and drop features."
        }, {
            "name": "drillMode",
            "description": "Gets and sets whether expand or collapse operations are allowed.",
            "values": [{
                "name": "collapsible"
            }, {
                "name": "none"
            }]
        }, {
            "name": "expanded",
            "description": "Specifies the key set containing the keys of the items that should be expanded.\n\nUse the ExpandedKeySet class to specify items to expand.\nUse the ExpandAllKeySet class to expand all items."
        }, {
            "name": "firstSelectedItem",
            "description": "Gets the key and data of the first selected item. The first selected item is defined as the first\nkey returned by the selection property. The value of this property contains:\n\nkey - the key of the first selected item.\ndata - the data of the first selected item. If the selected item is not locally available, this will be null. If the data property is not set and that static HTML element is used as data, then this will be the item element.\n\nIf no items are selected then this property will return an object with both key and data properties set to null."
        }, {
            "name": "groupHeaderPosition",
            "description": "Gets and sets whether group header should stick to the top as user scrolls.",
            "values": [{
                "name": "static"
            }, {
                "name": "sticky"
            }]
        }, {
            "name": "item",
            "description": "Customize the functionalities of each item on the list."
        }, {
            "name": "scrollPolicy",
            "description": "Gets and sets how data are fetch as user scrolls down the list.",
            "values": [{
                "name": "auto"
            }, {
                "name": "loadMoreOnScroll"
            }]
        }, {
            "name": "scrollPolicyOptions",
            "description": "Gets and sets the fetch options as user scrolls down the list that triggers fetch of data."
        }, {
            "name": "scrollPosition",
            "description": "Gets and sets the scroll position of list view."
        }, {
            "name": "selection",
            "description": "Gets and sets the keys of the selected items."
        }, {
            "name": "selectionMode",
            "description": "Gets and sets whether selection can be made and the cardinality of selection.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "selectionRequired",
            "description": "Gets and sets whether there should be at least one item selected when selection is enabled."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-animate-start",
            "description": "Event handler for when the default animation of a particular action is about to start."
        }, {
            "name": "on-oj-animate-end",
            "description": "Event handler for when the default animation of a particular action has ended."
        }, {
            "name": "on-oj-before-current-item",
            "description": "Event handler for when before the current item is changed."
        }, {
            "name": "on-oj-before-expand",
            "description": "Event handler for when an item is about to expand."
        }, {
            "name": "on-oj-before-collapse",
            "description": "Event handler for when an item is about to collapse."
        }, {
            "name": "on-oj-collapse",
            "description": "Event handler for after an item has collapsed."
        }, {
            "name": "on-oj-copy",
            "description": "Event handler for after the copy action is performed on an item."
        }, {
            "name": "on-oj-cut",
            "description": "Event handler for after the cut action is performed on an item."
        }, {
            "name": "on-oj-expand",
            "description": "Event handler for after an item has expanded."
        }, {
            "name": "on-oj-paste",
            "description": "Event handler for after the paste action is performed on an item."
        }, {
            "name": "on-oj-reorder",
            "description": "Event handler for after the order of the item has changed through drag and drop or cut and paste action."
        }],
        "name": "oj-list-view",
        "description": "Displays data items as a list or a grid with highly interactive features."
    }, {
        "attributes": [{
            "name": "reorderHandle",
            "description": "Specifies the selector of the child DOM element that can be used to reorder the child."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-animate-start",
            "description": "Event triggered when the default animation of a particular action is about to start."
        }, {
            "name": "on-oj-animate-end",
            "description": "Event triggered when the default animation of a particular action has ended."
        }, {
            "name": "on-oj-before-insert",
            "description": "Event triggered before a tile is inserted."
        }, {
            "name": "on-oj-insert",
            "description": "Event triggered after a tile is inserted."
        }, {
            "name": "on-oj-before-remove",
            "description": "Event triggered before a tile is removed."
        }, {
            "name": "on-oj-remove",
            "description": "Event triggered after a tile is removed."
        }, {
            "name": "on-oj-before-resize",
            "description": "Event triggered before a tile is resized."
        }, {
            "name": "on-oj-resize",
            "description": "Event triggered after a tile is resized."
        }, {
            "name": "on-oj-before-reorder",
            "description": "Event triggered before a tile is reordered."
        }, {
            "name": "on-oj-reorder",
            "description": "Event triggered after a tile is reordered."
        }],
        "name": "oj-masonry-layout",
        "description": "Container element that lays out its children in a grid of tiles."
    }, {
        "attributes": [{
            "name": "disabled",
            "description": "Disables the menu if set to true."
        }, {
            "name": "openOptions",
            "description": "A collection of settings impacting the launch of a menu. These openOptions may be accessed and overridden individually or collectively, as seen in the examples. The values set here can be overridden on a per-launch basis by passing the corresponding params into the open method. Those per-launch values can be further customized by a ojBeforeOpen listener. The built-in [menu button]ojMenuButton and [context menu]baseComponent#contextMenu functionality overrides some of the Menu's openOptions, for WAI-ARIA compliance and other reasons. Thus, if the app really wants to customize those values, it must do so in a ojBeforeOpen listener. If the built-in menu button or context menu functionality is modified in this way, it is the app's responsibility to ensure that the result is both correct and accessible."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed. The default animation can be cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended, such as when the component is being opened/closed or a child item is being added/removed. This event is not triggered if the application has called preventDefault on the animateStart event."
        }, {
            "name": "on-oj-before-open",
            "description": "Triggered before this menu is launched via the open method or via menu button or context menu functionality. The launch can be cancelled by calling event.preventDefault(). The event.detail.openOptions payload field contains the settings being used for this menu launch, resulting from merging the openOptions passed to open(), if any, with the openOptions component option. This field is \"live\", meaning that the listener can alter fields such as position to affect this launch without affecting the component option. Since these changes are applied to the merged object, they supersede both the openOptions passed to open() and the openOptions component option. If any of the above techniques are used to alter the built-in [menu button]ojButton#menu or [context menu]baseComponent#contextMenu functionality, it is the app's responsibility to ensure that the result is both correct and accessible."
        }, {
            "name": "on-oj-close",
            "description": "Triggered after this menu is closed."
        }, {
            "name": "on-oj-open",
            "description": "Triggered after this menu is launched via the open method or via menu button or context menu functionality."
        }, {
            "name": "on-oj-action",
            "description": "Triggered when a menu item (other than the built-in \"Cancel\" item) is selected. To ensure keyboard accessibility, the only correct, supported way to react to the selection of a menu item is to listen for this event. Click listeners and href navigation should not be used. To find the value of the menu item that triggered an action event, the event.target.value should be used."
        }],
        "name": "oj-menu",
        "description": "Displays a popup menu with support for touch, mouse, and keyboard interactions."
    }, {
        "attributes": [{
            "name": "chroming",
            "description": "Indicates in what states the button has chrome (background and border).",
            "values": [{
                "name": "full"
            }, {
                "name": "half"
            }, {
                "name": "outlined"
            }]
        }, {
            "name": "disabled",
            "description": "Specifies that the button element should be disabled."
        }, {
            "name": "display",
            "description": "Specifies whether the button displays label and icons, or just icons.",
            "values": [{
                "name": "all"
            }, {
                "name": "icons"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-action",
            "description": "Triggered when a button is clicked. This will be triggered by keyboard events as well as mouse/touch events. To ensure keyboard accessibility, the only correct, supported way to react to the click of a button is to listen for this event. Click listeners and href navigation should not be used."
        }],
        "name": "oj-menu-button",
        "description": "A button that launches a menu when clicked."
    }, {
        "attributes": [{
            "name": "disabled",
            "description": "Disables all the checkable menu items if set to true."
        }, {
            "name": "options",
            "description": "The checkable menu option items."
        }, {
            "name": "value",
            "description": "The value of the element."
        }],
        "name": "oj-menu-select-many",
        "description": "Checkable menu items supporting multiple selections"
    }, {
        "attributes": [{
            "name": "displayOptions",
            "description": "Specifies the display options for contents of the message."
        }, {
            "name": "message",
            "description": "Structured data specifying essential information to display a message on the UI."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-close",
            "description": "Triggered after the message is closed through user interaction or due to calling\nclose() method."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when the default animation is about to start for the open or close actions of the message .\nThe default animation can be cancelled by calling\nevent.preventDefault.\n\nIn order to override open animation, the ojAnimateStart event listener needs to be\nregistered before the component is created. This means that onOjAnimateStart\ncannot be used to register listener for 'open' action because it doesn't exist\nuntil the component is upgraded or created at which time it is open. For the 'open' action, use\nthe addEventListener method on the associated oj-message elements or\non-oj-animate-start attribute to register a listener instead."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when the default animation is about to end for the open or close actions of the message.\nThe default animation can be cancelled by calling\nevent.preventDefault."
        }],
        "name": "oj-message",
        "description": "Displays a message"
    }, {
        "attributes": [{
            "name": "display",
            "description": "Specifies the display purpose of messages. The valid values for display are\ngeneral and notification.\nGeneral messages are commonly rendered at the page level or section level, relating to the task\nthe user performed. Notification messages are typically used for reporting asynchronous events,\nor to communicate some background activity.\n\nThe presentation of the message is inline by default. However, when a\nojMessages#positionproperty is provided, the presentation will be an overlay.\nThe alignment of the overlay will default based on the display property. The\ndefaults are defined by the theme.",
            "values": [{
                "name": "general"
            }, {
                "name": "notification"
            }]
        }, {
            "name": "displayOptions",
            "description": "Specifies the display options for contents of all the messages specified for the\nojMessages#messages attribute."
        }, {
            "name": "messages",
            "description": " Specifies the collection of structured message data used to display the individual messages.\nInstead of providing multiple oj-message as children, this property can be used to conveniently\nspecify the required data as a single collection. Individual message will be automatically\ncreated based on this data. See ojMessage.Message for message values. More information about the structured 'Message' data can be found in documentation for\n'message' attribute of oj-message element.\n\nThe collection can be two types:\nan array of oj.ojMessage.Message objects.\noj.ArrayDataProvider of oj.ojMessage.Message objects. Look at ArrayDataProvider for more available options."
        }, {
            "name": "position",
            "description": "The position property defines the presentation style. The default presentation is inline,\ndefined by a null position property value. When a value is provide for the\nproperty, the presentation style will be an overaly \"popup\". The aligment of the overaly\nis defined by the position sub-properties.\n\nDefault position sub-properites are extended by the provided value. Defaults vary\nbased on the display property and provided by theme. The position\nproperty is used to establish the location where the messages popup overlay will appear\nrelative to another element.\n\nThe \"my\" and \"at\" properties defines aligment points relative to the popup and other\nelement. The \"my\" property represents the popups alignment where the \"at\" property\nrepresents the other element that can be identified by \"of\" or defauts to the launcher\nwhen the popup opens. The values of these properties describe horizontal and\nvertical alignments."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-messages",
        "description": "Manages layout and display of messages."
    }, {
        "attributes": [{
            "name": "animation",
            "description": "Defines animation object used for view transitions."
        }, {
            "name": "config",
            "description": "The module configuration object"
        }, {
            "name": "on-oj-transition-start",
            "description": "Triggered before transition to the new View is started"
        }, {
            "name": "on-oj-view-connected",
            "description": "Triggered after the View is inserted into the DOM"
        }, {
            "name": "on-oj-transition-end",
            "description": "Triggered after transition to the new View is complete"
        }, {
            "name": "on-oj-view-disconnected",
            "description": "Triggered after the View is removed from the DOM"
        }],
        "name": "oj-module",
        "description": "Navigational element that manages content replacement within a particular region of the page."
    }, {
        "attributes": [{
            "name": "as",
            "description": "Gets and sets the alias for the current item when referenced inside the item template."
        }, {
            "name": "currentItem",
            "description": "Gets and sets the key of the item that should have keyboard focus."
        }, {
            "name": "data",
            "description": "Gets and sets the data provider for Navigation List."
        }, {
            "name": "display",
            "description": "Gets and sets whether all or only icons need to be displayed.",
            "values": [{
                "name": "all"
            }, {
                "name": "icons"
            }]
        }, {
            "name": "drillMode",
            "description": "Gets and sets whether expand/collapse or sliding operations are allowed.",
            "values": [{
                "name": "collapsible"
            }, {
                "name": "none"
            }, {
                "name": "sliding"
            }]
        }, {
            "name": "edge",
            "description": "Gets and sets the edge position of the Navigation List.",
            "values": [{
                "name": "start"
            }, {
                "name": "top"
            }]
        }, {
            "name": "expanded",
            "description": "Specifies the key set containing the keys of the items that should be expanded.\n\nUse the ExpandedKeySet class to specify items to expand.\nUse the ExpandAllKeySet class to expand all items."
        }, {
            "name": "hierarchyMenuThreshold",
            "description": "Gets and sets the level at which user can see hierarchical menu button (defaults to 0 if not specified in theme)."
        }, {
            "name": "item",
            "description": "Customize the functionalities of each item in Navigation List."
        }, {
            "name": "overflow",
            "description": "Gets and sets overflow behaviour for Navigation List.",
            "values": [{
                "name": "hidden"
            }, {
                "name": "popup"
            }]
        }, {
            "name": "rootLabel",
            "description": "Gets and sets the label for top level list items."
        }, {
            "name": "selection",
            "description": "Gets and sets the key of the selected item."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-animate-start",
            "description": "Event handler for when the default animation of a particular action is about to start."
        }, {
            "name": "on-oj-animate-end",
            "description": "Event handler for when the default animation of a particular action has ended."
        }, {
            "name": "on-oj-before-select",
            "description": "Event handler for when before the selection is changed."
        }, {
            "name": "on-oj-before-collapse",
            "description": "Event handler for when an item is about to collapse."
        }, {
            "name": "on-oj-before-current-item",
            "description": "Event handler for when before the current item is changed."
        }, {
            "name": "on-oj-collapse",
            "description": "Event handler for after an item has collapsed."
        }, {
            "name": "on-oj-before-expand",
            "description": "Event handler for when an item is about to expand."
        }, {
            "name": "on-oj-expand",
            "description": "Event handler for after an item has expanded."
        }],
        "name": "oj-navigation-list",
        "description": "Displays items as a collapsible or sliding navigation list with highly interactive features."
    }, {
        "attributes": [{
            "name": "animationOnDataChange",
            "description": "Specifies the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Specifies the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "as",
            "description": "An alias for the $current context variable when referenced inside nodeTemplate when using a DataProvider."
        }, {
            "name": "cellContent",
            "description": "The content the cells will display. \"auto\" switches between nodes and cell counts based on available space. \"counts\" forces the NBox to always render cell counts.",
            "values": [{
                "name": "auto"
            }, {
                "name": "counts"
            }]
        }, {
            "name": "cellMaximize",
            "description": "Whether or not the cell maximize/de-maximize gestures are enabled.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "cells",
            "description": "The list of cells. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "columns",
            "description": "The list of columns. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "columnsTitle",
            "description": "The text for the title on the column edge."
        }, {
            "name": "countLabel",
            "description": "A function that returns custom text for the cell count labels."
        }, {
            "name": "data",
            "description": "The oj.DataProvider for the NBox. It should provide rows where each row corresponds to a single NBox node."
        }, {
            "name": "groupAttributes",
            "description": "An array of attributes to style the group nodes with. Any attributes not listed will be ignored.",
            "values": [{
                "name": "color"
            }, {
                "name": "indicatorColor"
            }, {
                "name": "indicatorIconColor"
            }, {
                "name": "indicatorIconPattern"
            }, {
                "name": "indicatorIconShape"
            }]
        }, {
            "name": "groupBehavior",
            "description": "Specifies how nodes should be grouped.",
            "values": [{
                "name": "acrossCells"
            }, {
                "name": "none"
            }, {
                "name": "withinCell"
            }]
        }, {
            "name": "hiddenCategories",
            "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered."
        }, {
            "name": "highlightMatch",
            "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of category strings used for category highlighting. Data items with a category in highlightedCategories will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over data items.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "labelTruncation",
            "description": "Determines node label truncation behavior. Labels are always truncated if limited by container (e.g. cell, dialog) width. Optionally, NBox can further truncate node labels to increase the number of nodes visible to the user. \"on\" allows label truncation to increase number of visible nodes. \"ifRequired\" only allows truncation when limited by container width.",
            "values": [{
                "name": "ifRequired"
            }, {
                "name": "on"
            }]
        }, {
            "name": "maximizedColumn",
            "description": "The id of the column to be maximized."
        }, {
            "name": "maximizedRow",
            "description": "The id of the row to be maximized."
        }, {
            "name": "nodes",
            "description": "The list of nodes. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "otherColor",
            "description": "The color for the \"other\" group nodes."
        }, {
            "name": "otherThreshold",
            "description": "The threshold for aggregating nodes into an \"other\" group node."
        }, {
            "name": "rows",
            "description": "The list of rows. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "rowsTitle",
            "description": "The text for the title on the row edge."
        }, {
            "name": "selection",
            "description": "An array containing the ids of the selected nodes."
        }, {
            "name": "selectionMode",
            "description": "Specifies the selection mode.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "styleDefaults",
            "description": "An object defining the style defaults for this NBox."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "touchResponse",
            "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events if the element does not require an internal feature that requires a touch start gesture like scrolling. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if panning is not available for those elements that support the feature.",
            "values": [{
                "name": "auto"
            }, {
                "name": "touchStart"
            }]
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-n-box",
        "description": "An interactive data visualization (typically found in Human Capital Management applications) in which employees are grouped and compared across two dimensions.  Each dimension can be split into multiple ranges."
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The color of the node border."
        }, {
            "name": "borderWidth",
            "description": "The width of the node border."
        }, {
            "name": "categories",
            "description": "An optional array of additional category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with other visualization elements.\nDefaults to node's id if unspecified"
        }, {
            "name": "color",
            "description": "The background color of this node."
        }, {
            "name": "column",
            "description": "The column id for this node."
        }, {
            "name": "groupCategory",
            "description": "The group category this node belongs to. Nodes with the same groupCategory will be grouped together."
        }, {
            "name": "icon",
            "description": "Defines the primary icon for this node."
        }, {
            "name": "indicatorColor",
            "description": "The background color for the indicator section of this node."
        }, {
            "name": "indicatorIcon",
            "description": "Defines the indicator icon for this node."
        }, {
            "name": "label",
            "description": "The text for the node label."
        }, {
            "name": "row",
            "description": "The row id for this node."
        }, {
            "name": "secondaryLabel",
            "description": "The text for the secondary node label."
        }, {
            "name": "shortDesc",
            "description": "The description of the node. This is used for customizing the tooltip text."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class defining the style of the node text."
        }, {
            "name": "svgStyle",
            "description": "The CSS style object defining the style of the node text."
        }, {
            "name": "xPercentage",
            "description": "An optional horizontal position (as a percentage) to be used in the average position calculation when grouping across cells."
        }, {
            "name": "yPercentage",
            "description": "An optional vertical position (as a percentage) to be used in the average position calculation when grouping across cells."
        }],
        "name": "oj-n-box-node",
        "description": "ojNBoxNode"
    }, {
        "attributes": [{
            "name": "disabled",
            "description": "Disables the group if set to true."
        }, {
            "name": "label",
            "description": "The group label."
        }],
        "name": "oj-optgroup",
        "description": "Supports grouping of child oj-option elements."
    }, {
        "attributes": [{
            "name": "disabled",
            "description": "Disables the option if set to true."
        }, {
            "name": "value",
            "description": "The value of the option."
        }],
        "name": "oj-option",
        "description": "Declare values for JET elements that display a list of values."
    }, {
        "attributes": [{
            "name": "data",
            "description": "The data to bind to the PagingControl.\n\nMust implement the oj.PagingModel interface PagingModel"
        }, {
            "name": "loadMoreOptions",
            "description": "Options for loadMore mode."
        }, {
            "name": "mode",
            "description": "Paging mode.",
            "values": [{
                "name": "loadMore"
            }, {
                "name": "page"
            }]
        }, {
            "name": "overflow",
            "description": "Options for when the PagingControl width is too narrow to accommodate the controls in the paging control",
            "values": [{
                "name": "fit"
            }, {
                "name": "none"
            }]
        }, {
            "name": "pageOptions",
            "description": "Options for page mode."
        }, {
            "name": "pageSize",
            "description": "Page size.\n"
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-paging-control",
        "description": "Provides paging functionality for data collections."
    }, {
        "attributes": [{
            "name": "animationDuration",
            "description": "The duration of the animations, in milliseconds. The default value comes from the CSS and varies based on theme."
        }, {
            "name": "animationOnDataChange",
            "description": "The animation when the data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "The animation that is shown on initial display.",
            "values": [{
                "name": "alphaFade"
            }, {
                "name": "auto"
            }, {
                "name": "none"
            }, {
                "name": "popIn"
            }, {
                "name": "zoom"
            }]
        }, {
            "name": "as",
            "description": "An alias for the $current context variable when referenced inside itemTemplate when using a DataProvider."
        }, {
            "name": "columnCount",
            "description": "The number of columns that the picto chart has. The number of columns will be automatically computed if not specified."
        }, {
            "name": "columnWidth",
            "description": "The width of a column in pixels. The width of columns will be automatically computed if not specified. Setting this property in a fixed layout (when the element width and height are defined) may cause items to be truncated."
        }, {
            "name": "data",
            "description": "The oj.DataProvider for the picto chart. It should provide rows where each row corresponds to a single picto chart item."
        }, {
            "name": "drilling",
            "description": "Whether drilling is enabled. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable or disable drilling on individual items, use the drilling attribute in each item.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "hiddenCategories",
            "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered."
        }, {
            "name": "highlightMatch",
            "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of category strings used for category highlighting. Data items with a category in highlightedCategories will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "The behavior applied when hovering over data items.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "hoverBehaviorDelay",
            "description": "Specifies initial hover delay in ms for highlighting data items."
        }, {
            "name": "items",
            "description": "An array of objects with the following properties that defines the pictoChart items."
        }, {
            "name": "layout",
            "description": "The direction in which the items are laid out.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "layoutOrigin",
            "description": "Defines where the first item is rendered. The subsequent items follow the first item according to the layout.",
            "values": [{
                "name": "bottomEnd"
            }, {
                "name": "bottomStart"
            }, {
                "name": "topEnd"
            }, {
                "name": "topStart"
            }]
        }, {
            "name": "rowCount",
            "description": "The number of rows that the picto chart has. The number of rows will be automatically computed if not specified."
        }, {
            "name": "rowHeight",
            "description": "The height of a row in pixels. The height of rows will be automatically computed if not specified. Setting this property in a fixed layout (when the element width and height are defined) may cause items to be truncated."
        }, {
            "name": "selection",
            "description": "An array of id strings, used to define the selected objects."
        }, {
            "name": "selectionMode",
            "description": "The type of selection behavior that is enabled on the picto chart.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "tooltip",
            "description": "A function that returns a custom tooltip. The function takes a dataContext argument, provided by the picto chart. The function should return an Object that contains only one of the two properties: insert: HTMLElement | string - An HTML element, which will be appended to the tooltip, or a tooltip string. preventDefault: true - Indicates that the tooltip should not be displayed. It is not necessary to return {preventDefault:false} to display tooltip, since this is a default behavior. "
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-drill",
            "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise)."
        }],
        "name": "oj-picto-chart",
        "description": "Displays information using icons to visualize an absolute number or the relative sizes of the different parts of a population."
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The border color of the item. Does not apply if custom image is specified."
        }, {
            "name": "borderWidth",
            "description": "The border width of the item in pixels. Does not apply if custom image is specified."
        }, {
            "name": "categories",
            "description": "An array of category strings corresponding to the picto chart items. This allows highlighting and filtering of items."
        }, {
            "name": "color",
            "description": "The color of the item. Does not apply if custom image is specified."
        }, {
            "name": "columnSpan",
            "description": "The number of columns each shape (or custom image) spans. Used for creating a picto chart with mixed item sizes."
        }, {
            "name": "count",
            "description": "Specifies the number of times that the shape (or custom image) is drawn. Fractional counts (such as 4.5) are supported; however, fractions other than the multiples of 0.5 should be avoided because the fractional rendering ignores the gaps between shapes and the irregularity of the shapes."
        }, {
            "name": "drilling",
            "description": "Whether drilling is enabled for the item. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all items at once, use the drilling attribute in the top level.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "name",
            "description": "The name of the item. Used for default tooltip and accessibility."
        }, {
            "name": "rowSpan",
            "description": "The number of rows each shape (or custom image) spans. Used for creating a picto chart with mixed item sizes."
        }, {
            "name": "shape",
            "description": "The shape of the item. Can take the name of a built-in shape or the svg path commands for a custom shape. \"None\" will make the item transparent and can be used to create gaps. Does not apply if custom image is specified."
        }, {
            "name": "shortDesc",
            "description": "The description of the item. This is used for customizing the tooltip text."
        }, {
            "name": "source",
            "description": "The URI of the custom image. If specified, it takes precedence over shape."
        }, {
            "name": "sourceHover",
            "description": "The optional URI for the hover state. If not specified, the source image will be used."
        }, {
            "name": "sourceHoverSelected",
            "description": "The optional URI for the hover selected state. If not specified, the source image will be used."
        }, {
            "name": "sourceSelected",
            "description": "The optional URI for the selected state. If not specified, the source image will be used."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified."
        }],
        "name": "oj-picto-chart-item",
        "description": "ojPictoChartItem"
    }, {
        "attributes": [{
            "name": "autoDismiss",
            "description": "Defines conditions that will cause an open popup to auto close dismiss. A value of\nfocusLoss defines the dismissal condition where focus\nhas left the content of the popup or from the associated launcher or if what the popup\nis aligned to is not fully visible within an overflow area.",
            "values": [{
                "name": "focusLoss"
            }, {
                "name": "none"
            }]
        }, {
            "name": "chrome",
            "description": "Defines the presents of border, shadow and background color of the root popup dom.\nValue of none applies the\noj-popup-no-chrome selector defined by the active\ntheme to the root dom of the popup to remove the default chrome.",
            "values": [{
                "name": "default"
            }, {
                "name": "none"
            }]
        }, {
            "name": "initialFocus",
            "description": "Determines if the popup should steal focus to its content when initially open. A value\nof none prevents the popup from grabbing focus when\nopen.",
            "values": [{
                "name": "auto"
            }, {
                "name": "firstFocusable"
            }, {
                "name": "none"
            }, {
                "name": "popup"
            }]
        }, {
            "name": "modality",
            "description": "Determines if the popup should block user input of the page behind with a blocking\noverlay pane.\n\nThe default modality varies by theme. Each theme can set its default by setting\n$popupModalityOptionDefault.",
            "values": [{
                "name": "modal"
            }, {
                "name": "modeless"
            }]
        }, {
            "name": "position",
            "description": "Position property is used to establish the location the popup will appear relative to\nanother element. ojPopup.Position defines \"my\" alignment \"at\" the alignment\n\"of\" some other thing which can be \"offset\" by so many pixels.\n\nThe \"my\" and \"at\" properties defines aligment points relative to the popup and other\nelement. The \"my\" property represents the popups alignment where the \"at\" property\nrepresents the other element that can be identified by \"of\" or defauts to the launcher\nwhen the popup opens. The values of these properties describe horizontal and\nvertical alignments.\n\nDeprecated v3.0.0 jQuery UI position syntax; Use of a percent unit with\n\"my\" or \"at\" is not supported."
        }, {
            "name": "tail",
            "description": "Determines if a decoration will be displayed from the popup that points to the element\nthe popup is aligned to. The simple value enables the\ntail defined by the current theme. In addtion, the\noj-popup-tail-simple selector will be applied to the\nroot dom element. This is to allow the box-shadow, z-index and other chrome styling to\nvary per tail decoration.",
            "values": [{
                "name": "none"
            }, {
                "name": "simple"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-before-open",
            "description": "Triggered before the popup is launched via the open()\nmethod. The open can be cancelled by calling\nevent.preventDefault()."
        }, {
            "name": "on-oj-open",
            "description": "Triggered after the popup is launched via the open()\nmethod."
        }, {
            "name": "on-oj-before-close",
            "description": "Triggered before the popup is dismissed via the\nclose() method. The close can be cancelled by calling\nevent.preventDefault()."
        }, {
            "name": "on-oj-close",
            "description": "Triggered after the popup is dismissed via the\nclose() method."
        }, {
            "name": "on-oj-focus",
            "description": "Triggered after focus has been transfered to the popup. This will occur after the\nopen() method is called, depending on the value\nof the initialFocus property. It's also triggered\nwhen using the F6 key to toggle focus from the associated launcher element\nto the content of the popup."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended, such as when the component is being\nopened/closed or a child item is being added/removed. This event is not triggered if\nthe application has called preventDefault on the animateStart\nevent."
        }],
        "name": "oj-popup",
        "description": "Displays a popup window that can display arbitrary content."
    }, {
        "attributes": [{
            "name": "max",
            "description": "The maximum allowed value."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "type",
            "description": "The shape of the Progress.",
            "values": [{
                "name": "bar"
            }, {
                "name": "circle"
            }]
        }, {
            "name": "value",
            "description": "The value of the Progress."
        }],
        "name": "oj-progress",
        "description": "Displays progress of an operation in a rectangular horizontal meter or in a circular meter."
    }, {
        "attributes": [{
            "name": "data",
            "description": "Data used by the ProgressList."
        }],
        "name": "oj-progress-list",
        "description": "Displays a ListView where data rows are ProgressItems."
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": " Disabled true disables the component and disables all the inputs/labels. Disabled false enables the component, and leaves the inputs' disabled property as it is in the dom. "
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "labelledBy",
            "description": "It is used to establish a relationship between this component and another element. A common use is to tie the oj-label and the oj-radioset together. The oj-label custom element has an id, and you use the labelled-by attribute to tie the two components together."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "optionRenderer",
            "description": "The renderer function that renders the content of each option."
        }, {
            "name": "options",
            "description": "The option items for the Radioset."
        }, {
            "name": "optionsKeys",
            "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute."
        }, {
            "name": "readonly",
            "description": "Whether the component is readonly. The readOnly property sets or returns whether an element is readOnly, or not. A readOnly element cannot be modified. However, a user can tab to it, highlight it, focus on it, and copy the text from it. If you want to prevent the user from interacting with the element, use the disabled property instead."
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit required validator is created using the validator factory - oj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator(). Translations specified using the translations.required option and the label associated with the component, are passed through to the options parameter of the createValidator method. When required option changes due to programmatic intervention, the component may clears message and run validation, based on the current state it's in. Running Validation if component is valid when required is set to true, then it runs deferred validation on the property value. This is to ensure errors are not flagged unnecessarily. if component is invalid and has deferred messages when required is set to false, then component messages are cleared but no deferred validation is run. if component is invalid and currently showing invalid messages when required is set, then component messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the optionChange event to clear custom errors. Clearing Messages Only messages created by the component are cleared. messagesCustom option is not cleared. This property set to false implies that a value is not required to be provided by the user. This is the default. This property set to true implies that a value is required to be provided by user and the input's label will render a required icon. Additionally a required validator - RequiredValidator - is implicitly used if no explicit required validator is set. An explicit required validator can be set by page authors using the validators option. When the option is not set, the element's required property is used as its initial value if it exists."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "The value of the component. When value option changes due to programmatic intervention, the component always clears all messages and runs deferred validation, and always refreshes UI display value. Clearing Messages All messages are cleared. This includes messagesCustom property. Running Validation component always runs deferred validation "
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-radioset",
        "description": "A grouping of related radio buttons."
    }, {
        "attributes": [{
            "name": "changed",
            "description": "Whether there has been a value entered by the user."
        }, {
            "name": "changedState",
            "description": "The changed shape for the gauge. Displayed after the user has set a value, or when the changed attribute of the data object is set to true."
        }, {
            "name": "hoverState",
            "description": "The shape that displays on hover."
        }, {
            "name": "max",
            "description": "Integer value specifying the maximum value of the gauge, which determines the number of shapes or images that are displayed."
        }, {
            "name": "min",
            "description": "The minimum value that can be set on the gauge by the end user. Does not affect the value set on the gauge by API."
        }, {
            "name": "orientation",
            "description": "Defines the type of rating gauge to be rendered.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "preserveAspectRatio",
            "description": "Specifies whether the images provided should show up at their defined aspect ratio. With 'none', the space is allocated evenly, and shapes could be stretched. With 'meet', The aspect ratio of the shape or image is taken into account when space is allocated. When aspect ratios conflict, the aspect ratio of the selectedState will be used.",
            "values": [{
                "name": "meet"
            }, {
                "name": "none"
            }]
        }, {
            "name": "readonly",
            "description": "Defines whether the value of the gauge can be changed by the end user."
        }, {
            "name": "selectedState",
            "description": "The selected shape for the gauge."
        }, {
            "name": "step",
            "description": "Specifies the increment by which values can be specified by the end user.",
            "values": [{
                "name": "0"
            }, {
                "name": "1"
            }, {
                "name": "5"
            }]
        }, {
            "name": "thresholds",
            "description": "An array of objects with the following properties defining the thresholds for the gauge."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "transientValue",
            "description": "The transientValue is the read-only property for retrieving\nthe transient value from the rating gauge. It is triggered when hovering over the rating gauge.\n\nThis is a read-only property so page authors cannot set or change it directly."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "unselectedState",
            "description": "The unselected shape for the gauge."
        }, {
            "name": "value",
            "description": "The value set on the gauge."
        }, {
            "name": "visualEffects",
            "description": "Defines whether visual effects such as overlays are applied to the gauge.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }],
        "name": "oj-rating-gauge",
        "description": "Displays information graphically, typically displaying or accepting user feedback on a product or service."
    }, {
        "attributes": [{
            "name": "refreshContent",
            "description": "Specifies the refresh function"
        }, {
            "name": "target",
            "description": "target element on which to detect a pull down action"
        }, {
            "name": "text",
            "description": "description text shown in the pull down panel after a pull down"
        }, {
            "name": "threshold",
            "description": "minimum amount of pixels needed in the pull down to trigger refreshContent. If none specified or 0, the threshold will be auto set to\nthe height of the pull to refresh loading panel."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-refresher",
        "description": "wrapper for attaching pull to refresh functionality to a DOM element"
    }, {
        "attributes": [{
            "name": "context",
            "description": "The context object obtained from the column renderer (Table) or cell renderer (DataGrid)"
        }, {
            "name": "expanded",
            "description": "Specifies if the RowExpander is expanded."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-expand",
            "description": "Triggered when a expand is performed on the RowExpander"
        }, {
            "name": "on-oj-collapse",
            "description": "Triggered when a collapse is performed on the RowExpander"
        }],
        "name": "oj-row-expander",
        "description": "Enable hierarchical data to be displayed in a JET Table and JET DataGrid."
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "minimumResultsForSearch",
            "description": "The threshold for showing the search box in the dropdown."
        }, {
            "name": "optionRenderer",
            "description": "The renderer function that renders the content of each option."
        }, {
            "name": "options",
            "description": "The option items for the Select."
        }, {
            "name": "optionsKeys",
            "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute."
        }, {
            "name": "pickerAttributes",
            "description": "The style attributes for the drop down."
        }, {
            "name": "placeholder",
            "description": "A short hint that can be displayed before user selects a value."
        }, {
            "name": "readonly",
            "description": "Specifies whether a value is readonly"
        }, {
            "name": "renderMode",
            "description": "Specifies whether to render select in JET or as a HTML Select tag.",
            "values": [{
                "name": "jet"
            }, {
                "name": "native"
            }]
        }, {
            "name": "required",
            "description": "Specifies whether a value is required."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "The value of the element."
        }, {
            "name": "valueOptions",
            "description": "The current values of the element and theirs associated display labels."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-select-many",
        "description": "A dropdown list that supports multiple selections and search filtering."
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "minimumResultsForSearch",
            "description": "The threshold for showing the search box in the dropdown."
        }, {
            "name": "optionRenderer",
            "description": "The renderer function that renders the content of each option."
        }, {
            "name": "options",
            "description": "The option items for the Select."
        }, {
            "name": "optionsKeys",
            "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute."
        }, {
            "name": "pickerAttributes",
            "description": "The style attributes for the drop down."
        }, {
            "name": "placeholder",
            "description": "A short hint that can be displayed before user selects a value."
        }, {
            "name": "readonly",
            "description": "Specifies whether a value is readonly"
        }, {
            "name": "renderMode",
            "description": "Specifies whether to render select in JET or as a HTML Select tag.",
            "values": [{
                "name": "jet"
            }, {
                "name": "native"
            }]
        }, {
            "name": "required",
            "description": "Specifies whether a value is required."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "The value of the element."
        }, {
            "name": "valueOption",
            "description": "The current value of the element and its associated display label."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-select-one",
        "description": "A dropdown list that supports single selection and search filtering."
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The disabled attribute is used as its initial value if it exists, when the attribute is not explicitly set. When neither is set, disabled defaults to false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "max",
            "description": "The maximum value of the slider. The max must not be less than the min, or else an Error is thrown during initialization."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "min",
            "description": "The minimum value of the slider. The min must not be greater than the max, or else an Error is thrown during initialization."
        }, {
            "name": "orientation",
            "description": "Specify the orientation of the slider.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "step",
            "description": "Determines the size or amount of each interval or step the slider takes between min and max. The full specified value of the range (max - min) should be divisible by step."
        }, {
            "name": "transientValue",
            "description": "The transientValue is the read-only attribute for retrieving the transient value from the slider. The transientValue updates to display the transient changes of the slider thumb value (subject to the step constraints). The difference in behavior is transientValue will be updated as the thumb is sliding, where as value is updated only after the thumb is released (or after a key press). This is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "type",
            "description": "The slider type determines whether the slider how the value is represented in the UI.",
            "values": [{
                "name": "fromMax"
            }, {
                "name": "fromMin"
            }, {
                "name": "single"
            }]
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "The numerical value of the slider. Note that the value attribute should be compatible with the type attribute, as described above."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-slider",
        "description": "Displays an interactive slider element."
    }, {
        "attributes": [{
            "name": "animationDuration",
            "description": "The duration of the animations in milliseconds. The default value comes from the CSS and varies based on theme."
        }, {
            "name": "animationOnDataChange",
            "description": "Defines the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Defines the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "areaColor",
            "description": "The color of the area in area or lineWithArea spark chart."
        }, {
            "name": "areaSvgClassName",
            "description": "The CSS style class to apply if the type is area or lineWithArea. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "areaSvgStyle",
            "description": "The inline style to apply if the type is area or lineWithArea. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "as",
            "description": "An alias for the $current context variable when referenced inside itemTemplate when using a DataProvider."
        }, {
            "name": "barGapRatio",
            "description": "Specifies the width of the bar gap as a ratio of the item width. The valid value is a number from 0 to 1."
        }, {
            "name": "baselineScaling",
            "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero.",
            "values": [{
                "name": "min"
            }, {
                "name": "zero"
            }]
        }, {
            "name": "color",
            "description": "The color of the data items. The default value varies based on theme."
        }, {
            "name": "data",
            "description": "The oj.DataProvider for the spark chart. It should provide rows where each row corresponds to a single spark chart item."
        }, {
            "name": "firstColor",
            "description": "The color of the first data item."
        }, {
            "name": "highColor",
            "description": "The color of the data item with the greatest value."
        }, {
            "name": "items",
            "description": "An array of objects with the following properties that defines the data for the spark chart. Also accepts a Promise for deferred data rendering."
        }, {
            "name": "lastColor",
            "description": "The color of the last data item."
        }, {
            "name": "lineStyle",
            "description": "The line style of the data line. Only applies to line spark charts.",
            "values": [{
                "name": "dashed"
            }, {
                "name": "dotted"
            }, {
                "name": "solid"
            }]
        }, {
            "name": "lineType",
            "description": "The line type of the data line or area. Only applies to line and area spark charts.",
            "values": [{
                "name": "centeredSegmented"
            }, {
                "name": "centeredStepped"
            }, {
                "name": "curved"
            }, {
                "name": "none"
            }, {
                "name": "segmented"
            }, {
                "name": "stepped"
            }, {
                "name": "straight"
            }]
        }, {
            "name": "lineWidth",
            "description": "The width of the data line. Only applies to line spark charts."
        }, {
            "name": "lowColor",
            "description": "The color of the data item with the lowest value."
        }, {
            "name": "markerShape",
            "description": "The shape of the data markers. Can take the name of a built-in shape or the svg path commands for a custom shape. Only applies to line and area spark charts."
        }, {
            "name": "markerSize",
            "description": "The size of the data markers in pixels. Only applies to line and area spark charts."
        }, {
            "name": "referenceObjects",
            "description": "An array of objects with the following properties defining the reference objects associated with the y axis of the spark chart."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the data items. For type lineWithArea, this style will only be applied to the line if areaClassName is also specified. The style class and inline style will override any other styling specified through the properties. For tooltips, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the data items. For type lineWithArea, this style will only be applied to the line if areaStyle is also specified. The style class and inline style will override any other styling specified through the properties. For tooltips, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "type",
            "description": "The chart type.",
            "values": [{
                "name": "area"
            }, {
                "name": "bar"
            }, {
                "name": "line"
            }, {
                "name": "lineWithArea"
            }]
        }, {
            "name": "visualEffects",
            "description": "Defines whether visual effects such as overlays are applied to the spark chart.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }],
        "name": "oj-spark-chart",
        "description": "Displays information graphically, typically highlighting the trend of a data set in a compact form factor."
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The default border color for the data items."
        }, {
            "name": "color",
            "description": "The color of the bar or marker for the data item. This override can be used to highlight important values or thresholds."
        }, {
            "name": "date",
            "description": "The date for the data item. The date should only be specified if the interval between data items is irregular."
        }, {
            "name": "high",
            "description": "The high value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart."
        }, {
            "name": "low",
            "description": "The low value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart."
        }, {
            "name": "markerDisplayed",
            "description": "Defines whether a marker should be displayed for the data item. Only applies to line and area spark charts",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "markerShape",
            "description": "The shape of the data markers. Can take the name of a built-in shape or the svg path commands for a custom shape. Only applies to line and area spark charts."
        }, {
            "name": "markerSize",
            "description": "The size of the data markers in pixels. Only applies to line and area spark charts."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute."
        }, {
            "name": "value",
            "description": "The value of the data item."
        }],
        "name": "oj-spark-chart-item",
        "description": "ojSparkChartItem"
    }, {
        "attributes": [{
            "name": "angleExtent",
            "description": "Specifies the angle extent of a gauge with circular orientation. Value should be provided in degrees."
        }, {
            "name": "animationDuration",
            "description": "The duration of the animations, in milliseconds. The default value comes from the CSS and varies based on theme."
        }, {
            "name": "animationOnDataChange",
            "description": "Defines the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Defines the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "borderColor",
            "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme."
        }, {
            "name": "borderRadius",
            "description": "Defines the border radius of the indicator and plot area. When set to \"auto\", the border radius is set to a built-in default. Acceptable input follows CSS border-radius attribute specifications. The plot area border radius can be overwritten with the plotArea borderRadius atribute."
        }, {
            "name": "center",
            "description": "An object defining the center content of a status meter with circular orientation."
        }, {
            "name": "color",
            "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme."
        }, {
            "name": "indicatorSize",
            "description": "Defines the ratio of relative thickness of the indicator to the plot area."
        }, {
            "name": "innerRadius",
            "description": "Specifies the inner radius of a gauge with circular orientation, defined by the distance from the center of the gauge to the innermost edge of the indicator and plot area. Valid values are a percent or ratio from 0 to 1."
        }, {
            "name": "label",
            "description": "An object defining the label."
        }, {
            "name": "max",
            "description": "The maximum value of the gauge."
        }, {
            "name": "metricLabel",
            "description": "An object defining the value label."
        }, {
            "name": "min",
            "description": "The minimum value of the gauge."
        }, {
            "name": "orientation",
            "description": "Defines the type of status meter to be rendered.",
            "values": [{
                "name": "circular"
            }, {
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "plotArea",
            "description": "Plot Area for Status Meter Guage"
        }, {
            "name": "readonly",
            "description": "Defines whether the value of the gauge can be changed by the end user."
        }, {
            "name": "referenceLines",
            "description": "An array of objects with the following properties defining the reference lines for the gauge."
        }, {
            "name": "startAngle",
            "description": "Specifies the start angle of a gauge with circular orientation. Value should be provided in degrees."
        }, {
            "name": "step",
            "description": "Specifies the increment by which values can be changed by the end user when readonly is false. The step must be a positive value that is smaller than the difference between the min and max. If not specified, the default step is 1/100 if the difference between the min and max."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the gauge indicator. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the gauge indicator. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the color attribute."
        }, {
            "name": "thresholdDisplay",
            "description": "Controls whether the current threshold is displayed on the indicator, in the plotArea, or if all the thresholds are diplayed in the plot area",
            "values": [{
                "name": "all"
            }, {
                "name": "currentOnly"
            }, {
                "name": "onIndicator"
            }]
        }, {
            "name": "thresholds",
            "description": "An array of objects with the following properties defining the thresholds for the gauge."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "transientValue",
            "description": "The transientValue is the read-only property for retrieving\nthe transient value from the status meter gauge. It is triggered when dragging over the status meter gauge.\n\nThis is a read-only property so page authors cannot set or change it directly."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "value",
            "description": "The metric value."
        }, {
            "name": "visualEffects",
            "description": "Defines whether visual effects such as overlays are applied to the gauge.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }],
        "name": "oj-status-meter-gauge",
        "description": "Displays information graphically, highlighting a specific metric value's progress in relation to its thresholds.  Horizontal, vertical, and circular formats are supported."
    }, {
        "attributes": [{
            "name": "animationDuration",
            "description": "Specifies the animation duration in milliseconds. For data change animations with multiple stages, this attribute defines the duration of each stage. For example, if an animation contains two stages, the total duration will be two times this attribute's value. The default value comes from the CSS and varies based on theme."
        }, {
            "name": "animationOnDataChange",
            "description": "Specifies the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Specifies the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationUpdateColor",
            "description": "The color that is displayed during a data change animation when a node is updated."
        }, {
            "name": "as",
            "description": "An alias for the $current context variable passed to slot content for the nodeTemplate slot."
        }, {
            "name": "colorLabel",
            "description": "Specifies the label describing the color metric of the sunburst. This label will be used in the legend."
        }, {
            "name": "data",
            "description": "The oj.DataProvider for the nodes of the sunburst. It should provide a data tree where each node in the data tree corresponds to a node in the sunburst. The row key will be used as the id for sunburst nodes. Note that when using this attribute, a template for the nodeTemplate slot should be provided."
        }, {
            "name": "displayLevels",
            "description": "The number of levels of nodes to display. By default all nodes are displayed."
        }, {
            "name": "drilling",
            "description": "Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire an ojBeforeDrill and ojDrill event on click (double click if selection is enabled). Drilling on a node causes a property change to the rootNode attribute. The displayLevels attribute can be used in conjunction with drilling to display very deep hieracrchies. Use \"on\" to enable drilling for all nodes. To enable or disable drilling on individual nodes use the drilling attribute in each node.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "expanded",
            "description": "Specifies the key set containing the ids of sunburst nodes that should be expanded on initial render. Use the ExpandedKeySet class to specify nodes to expand. Use the ExpandAllKeySet class to expand all nodes. By default, all sunburst nodes are expanded."
        }, {
            "name": "hiddenCategories",
            "description": "An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered."
        }, {
            "name": "highlightMatch",
            "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of category strings used for highlighting. Nodes matching all categories in this array will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over the nodes.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "hoverBehaviorDelay",
            "description": "Specifies initial hover delay in ms for highlighting nodes."
        }, {
            "name": "nodeDefaults",
            "description": "An object defining default properties for the nodes. Component CSS classes should be used to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the sunburst nodes. Some property default values come from the CSS and varies based on theme."
        }, {
            "name": "nodes",
            "description": "An array of objects with the following properties that defines the data for the nodes. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "rootNode",
            "description": "The id of the root node. When specified, only the root node and children of the root will be displayed."
        }, {
            "name": "rootNodeContent",
            "description": "An object defining custom root node content for the sunburst."
        }, {
            "name": "rotation",
            "description": "Specifies whether client side rotation is enabled.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "selection",
            "description": "An array containing the ids of the initially selected nodes."
        }, {
            "name": "selectionMode",
            "description": "Specifies the selection mode.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "sizeLabel",
            "description": "Specifies the label describing the size metric of the sunburst. This label will be used in the legend."
        }, {
            "name": "sorting",
            "description": "Specifies whether whether the nodes are sorted by size. When sorting is enabled, nodes that have the same parent are sorted in order of descending size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "startAngle",
            "description": "Specifies the starting angle of the sunburst. Valid values are numbers between 0 and 360."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "touchResponse",
            "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if panning is not available for those elements that support the feature.",
            "values": [{
                "name": "auto"
            }, {
                "name": "touchStart"
            }]
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-rotate-input",
            "description": "Triggered during user rotation of the sunburst."
        }, {
            "name": "on-oj-before-drill",
            "description": "Triggered immediately before any node in the sunburst is drilled into. The drill event can be vetoed if the beforeDrill event's preventDefault() is called."
        }, {
            "name": "on-oj-drill",
            "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise)."
        }, {
            "name": "on-oj-before-expand",
            "description": "Triggered immediately before any node in the sunburst is expanded. The expand event can be vetoed if the beforeExpand event's preventDefault() is called."
        }, {
            "name": "on-oj-expand",
            "description": "Triggered when a node has been expanded. The ui object contains one property, \"nodeId\", which is the id of the node that has been expanded."
        }, {
            "name": "on-oj-before-collapse",
            "description": "Triggered immediately before any container node in the sunburst is collapsed. The collapse event can be vetoed if the beforeCollapse event's preventDefault() is called."
        }, {
            "name": "on-oj-collapse",
            "description": "Triggered when a node has been collapsed."
        }],
        "name": "oj-sunburst",
        "description": "An interactive data visualization in which hierarchical data is represented in concentric rings.  Each ring segment is proportionally sized relative to the other segments at a given level."
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The border color of the node."
        }, {
            "name": "borderWidth",
            "description": "The border width of the node."
        }, {
            "name": "categories",
            "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend and other visualization elements. The categories array of each node is required to be a superset of the categories array of its parent node. If not specified, the ids of the node and its ancestors will be used."
        }, {
            "name": "color",
            "description": "The fill color of the node."
        }, {
            "name": "drilling",
            "description": "Specifies whether drilling is enabled for the node. Drillable nodes will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all nodes at once, use the drilling attribute in the top level.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "label",
            "description": "The label for this node."
        }, {
            "name": "labelDisplay",
            "description": "The label display behavior for the nodes. More labels are generally displayed when using rotation, with the trade off of readability. When auto is used, rotated or horizontal labels will be used based on the client browser and platform.",
            "values": [{
                "name": "auto"
            }, {
                "name": "horizontal"
            }, {
                "name": "off"
            }, {
                "name": "rotated"
            }]
        }, {
            "name": "labelHalign",
            "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
            "values": [{
                "name": "center"
            }, {
                "name": "inner"
            }, {
                "name": "outer"
            }]
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the label."
        }, {
            "name": "pattern",
            "description": "The pattern used to fill the node.",
            "values": [{
                "name": "largeChecker"
            }, {
                "name": "largeCrosshatch"
            }, {
                "name": "largeDiagonalLeft"
            }, {
                "name": "largeDiagonalRight"
            }, {
                "name": "largeDiamond"
            }, {
                "name": "largeTriangle"
            }, {
                "name": "none"
            }, {
                "name": "smallChecker"
            }, {
                "name": "smallCrosshatch"
            }, {
                "name": "smallDiagonalLeft"
            }, {
                "name": "smallDiagonalRight"
            }, {
                "name": "smallDiamond"
            }, {
                "name": "smallTriangle"
            }]
        }, {
            "name": "radius",
            "description": "The radius of the node relative to the other nodes."
        }, {
            "name": "selectable",
            "description": "Specifies whether or not the node will be selectable.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "shortDesc",
            "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text."
        }, {
            "name": "showDisclosure",
            "description": "Specifies whether to display the expand/collapse button on hover for a specific node. If the button is clicked, the expanded attribute is updated with the new array of node ids.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute."
        }, {
            "name": "value",
            "description": "The relative size of the node."
        }],
        "name": "oj-sunburst-node",
        "description": "ojSunburstNode"
    }, {
        "attributes": [{
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-action",
            "description": "Triggered when an action item is selected or when the default action is triggered."
        }],
        "name": "oj-swipe-actions",
        "description": "Adds swipe-to-reveal functionality to elements such as items in ListView."
    }, {
        "attributes": [{
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "\nWhether the component is disabled. The element's\ndisabled property is used as its initial\nvalue if it exists, when the attribute is not explicitly set. When neither is set,\ndisabled \ndefaults to false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "readonly",
            "description": "Whether the component is readOnly. The element's\nreadOnly property is used as its initial\nvalue if it exists, when the attribute is not explicitly set. When neither is set,\nreadOnly \ndefaults to false."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "value",
            "description": "The state of the switch component (true/false)."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-switch",
        "description": "Provides basic support for toggling a boolean value."
    }, {
        "attributes": [{
            "name": "value",
            "description": "Gets and Sets value for this switcher."
        }],
        "name": "oj-switcher",
        "description": "Dynamically decides which child element should be made visible."
    }, {
        "attributes": [{
            "name": "as",
            "description": "Gets and sets the alias for the current item when referenced inside the item template."
        }, {
            "name": "currentItem",
            "description": "Gets and sets the key of the item that should have keyboard focus."
        }, {
            "name": "data",
            "description": "Gets and sets the data provider for tabbar."
        }, {
            "name": "display",
            "description": "Gets and sets whether all or only icons need to be displayed.",
            "values": [{
                "name": "all"
            }, {
                "name": "icons"
            }]
        }, {
            "name": "edge",
            "description": "Gets and sets the edge position of the Tab Bar.",
            "values": [{
                "name": "bottom"
            }, {
                "name": "end"
            }, {
                "name": "start"
            }, {
                "name": "top"
            }]
        }, {
            "name": "item",
            "description": "Customize the functionalities of each tab on Tab bar."
        }, {
            "name": "overflow",
            "description": "Gets and sets overflow behaviour for Tab bar.",
            "values": [{
                "name": "hidden"
            }, {
                "name": "popup"
            }]
        }, {
            "name": "reorderable",
            "description": "Enable or disable the item reordering functionalities.",
            "values": [{
                "name": "disabled"
            }, {
                "name": "enabled"
            }]
        }, {
            "name": "selection",
            "description": "Gets and sets the key of the selected item."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "truncation",
            "description": "Gets and sets whether truncation needs to be applied.",
            "values": [{
                "name": "none"
            }, {
                "name": "progressive"
            }]
        }, {
            "name": "on-oj-animate-start",
            "description": "Event handler for when the default animation of a particular action is about to start."
        }, {
            "name": "on-oj-animate-end",
            "description": "Event handler for when the default animation of a particular action has ended."
        }, {
            "name": "on-oj-before-select",
            "description": "Event handler for when before the selection is changed."
        }, {
            "name": "on-oj-before-current-item",
            "description": "Event handler for when before the current item is changed."
        }, {
            "name": "on-oj-before-deselect",
            "description": "Event handler for when before tab is deselected."
        }, {
            "name": "on-oj-deselect",
            "description": "Event handler for when a tab is deselected."
        }, {
            "name": "on-oj-before-remove",
            "description": "Event handler for when a tab is about to be removed."
        }, {
            "name": "on-oj-remove",
            "description": "Event handler for when a tab is removed."
        }, {
            "name": "on-oj-reorder",
            "description": "Event handler for when a tab is reordered."
        }],
        "name": "oj-tab-bar",
        "description": "Displays tab bar with advanced interactive features."
    }, {
        "attributes": [{
            "name": "accessibility",
            "description": "Accessibility attributes."
        }, {
            "name": "as",
            "description": "Gets and sets the alias for the current context when referenced inside the cell template."
        }, {
            "name": "columns",
            "description": "An array of column definitions.\nIf the application change the column definitions after the Table is loaded, it must call the\nrefresh() method to update the Table display."
        }, {
            "name": "columnsDefault",
            "description": "Default values to apply to all columns objects."
        }, {
            "name": "currentRow",
            "description": "The row that currently have keyboard focus. Can be an index and/or key value.\nWhen both are specified, the index is used as a hint.\nReturns the current row or null if there is none."
        }, {
            "name": "data",
            "description": "The data to bind to the element.\n\nMust be of type oj.DataProvider DataProvider\nor type oj.TableDataSource TableDataSource"
        }, {
            "name": "display",
            "description": "Whether to display table in list or grid mode. Setting a value of grid\nwill cause the table to display in grid mode. The default value of this\nattribute is set through the theme.",
            "values": [{
                "name": "grid"
            }, {
                "name": "list"
            }]
        }, {
            "name": "dnd",
            "description": "Enable drag and drop functionality.\nJET provides support for HTML5 Drag and Drop events. Please refer to mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop third party documentation\non HTML5 Drag and Drop to learn how to use it."
        }, {
            "name": "editMode",
            "description": "Determine if the table is read only or editable. Use 'none' if the table is strictly read only and will be a single Tab stop on the page.\nUse 'rowEdit' if you want single row at a time editability. The table will initially render with all rows in read only mode. Pressing Enter/F2 or double click will make the current row editable and pressing Tab navigates to the next cell. Pressing ESC/F2 while in this mode will switch the table back to all rows in read only mode and will be a single Tab stop the page.",
            "values": [{
                "name": "none"
            }, {
                "name": "rowEdit"
            }]
        }, {
            "name": "firstSelectedRow",
            "description": "Gets the key and data of the first selected row. The first selected row is defined as the first\nkey returned by the selection property. The value of this property contains:\n\nkey - the key of the first selected row.\ndata - the data of the first selected row. If the selected row is not locally available, this will be null.\n\nIf no rows are selected then this property will return an object with both key and data properties set to null."
        }, {
            "name": "horizontalGridVisible",
            "description": "Whether the horizontal gridlines are to be drawn. Can be enabled or disabled.\nThe default value of auto means it's determined by the display attribute.",
            "values": [{
                "name": "auto"
            }, {
                "name": "disabled"
            }, {
                "name": "enabled"
            }]
        }, {
            "name": "rowRenderer",
            "description": "The row renderer function to use.\n\nThe renderer function will be passed in an Object which contains the fields: componentElement: A reference to the Table root element data: Key/value pairs of the row parentElement: Empty rendered TR element rowContext.datasource: The \"data\" attribute of the Table rowContext.mode: The mode of the row. It can be \"edit\" or \"navigation\". rowContext.status: Contains the rowIndex, rowKey, and currentRow\n\nThe function returns either a String or\na DOM element of the content inside the row. If the developer chooses\nto manipulate the row element directly, the function should return\nnothing."
        }, {
            "name": "scrollPolicy",
            "description": "Specifies the mechanism used to scroll the data inside the table. Possible values are: auto and loadMoreOnScroll.\nWhen loadMoreOnScroll is specified, additional data are fetched when the user scrolls to the bottom of the table.",
            "values": [{
                "name": "auto"
            }, {
                "name": "loadMoreOnScroll"
            }]
        }, {
            "name": "scrollPolicyOptions",
            "description": "scrollPolicy options.\n\nWhen scrollPolicy is loadMoreOnScroll, the next block of rows is fetched\nwhen the user scrolls to the end of the table. The fetchSize property\ndetermines how many rows are fetched in each block."
        }, {
            "name": "scrollPosition",
            "description": "Gets and sets the scroll position of table."
        }, {
            "name": "selection",
            "description": "Specifies the current selections in the table. Can be either an index or key value.\nWhen both are specified, the index is used as a hint.\nReturns an array of range objects, or an empty array if there's no selection."
        }, {
            "name": "selectionMode",
            "description": "The row and column selection modes. Both can be either single or multiple."
        }, {
            "name": "selectionRequired",
            "description": "Whether selection is required. If true, then at least one row will always\nremain selected."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "verticalGridVisible",
            "description": "Whether the vertical gridlines are to be drawn. Can be enabled or disabled.\nThe default value of auto means it's determined by the display attribute.",
            "values": [{
                "name": "auto"
            }, {
                "name": "disabled"
            }, {
                "name": "enabled"
            }]
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when the default animation of a particular action is about to start. The default animation can be cancelled by calling event.preventDefault.\nIf the event listener calls event.preventDefault to cancel the default animation, it must call the event.detail.endCallback function when it finishes its own animation handling.\nRow animations will only be triggered for rows in the current viewport and an event will be triggered for each cell in the animated row."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when the default animation of a particular action has ended. Note this event will not be triggered if application cancelled the default animation on animateStart.\nRow animations will only be triggered for rows in the current viewport and an event will be triggered for each cell in the animated row."
        }, {
            "name": "on-oj-before-current-row",
            "description": "Triggered before the current row is changed via the currentRow property or via the UI."
        }, {
            "name": "on-oj-before-row-edit",
            "description": "Triggered before the table is going to enter edit mode. To prevent editing the row, call event.preventDefault() in the listener."
        }, {
            "name": "on-oj-before-row-edit-end",
            "description": "Triggered before the table is going to exit edit mode. To prevent exit editing, call event.preventDefault() in the listener.\nThere is a provided beforeRowEditEnd function, oj.DataCollectionEditUtils.basicHandleRowEditEnd, which can be specified.\nThis function will handle canceling edits as well as invoking validation on input elements."
        }, {
            "name": "on-oj-sort",
            "description": "Triggered when a sort is performed on the table"
        }],
        "name": "oj-table",
        "description": "Displays data items in a tabular format with highly interactive features."
    }, {
        "attributes": [{
            "name": "animationOnDataChange",
            "description": "Defines the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Defines the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "as",
            "description": "An alias for the $current context variable when referenced inside itemTemplate when using a DataProvider."
        }, {
            "name": "data",
            "description": "The oj.DataProvider for the tag cloud. It should provide rows where each row corresponds to a single tag cloud item."
        }, {
            "name": "hiddenCategories",
            "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered."
        }, {
            "name": "highlightMatch",
            "description": "The matching condition for the highlightedCategories option. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of category strings used for category highlighting. Data items with a category in highlightedCategories will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over data items.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "items",
            "description": "An array of objects with the following properties that defines the data items for the tag cloud items. Also accepts a Promise or callback function for deferred data rendering. The function should return one of the following: Promise: A Promise that will resolve with an array of data items. No data will be rendered if the Promise is rejected. Array: An array of data items. "
        }, {
            "name": "layout",
            "description": "The layout to use for tag display.",
            "values": [{
                "name": "cloud"
            }, {
                "name": "rectangular"
            }]
        }, {
            "name": "selection",
            "description": "An array of id strings, used to define the selected data items."
        }, {
            "name": "selectionMode",
            "description": "The type of selection behavior that is enabled on the tag cloud.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "styleDefaults",
            "description": "Component CSS classes should be used to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the data item. Some property default values come from the CSS and varies based on theme."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "touchResponse",
            "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold \\delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if element panning is not available for those elements that support the feature.",
            "values": [{
                "name": "auto"
            }, {
                "name": "touchStart"
            }]
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-tag-cloud",
        "description": "An interactive data visualization of textual data, where the importance of each tagged word or phrase is represented by font size or color."
    }, {
        "attributes": [{
            "name": "categories",
            "description": "An array of category strings corresponding to the tag cloud items. This allows highlighting and filtering of items."
        }, {
            "name": "color",
            "description": "The color of the text. Will be overridden by any color defined in the style option. The default value comes from the CSS and varies based on theme."
        }, {
            "name": "label",
            "description": "The text of the item."
        }, {
            "name": "shortDesc",
            "description": "The description of the item. This is used for customizing the tooltip text."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class defining the style of the item text."
        }, {
            "name": "svgStyle",
            "description": "The CSS style object defining the style of the item text."
        }, {
            "name": "url",
            "description": "The url this item references."
        }, {
            "name": "value",
            "description": "The value of this item which will be used to scale its font-size within the tag cloud."
        }],
        "name": "oj-tag-cloud-item",
        "description": "ojTagCloudItem"
    }, {
        "attributes": [{
            "name": "asyncValidators",
            "description": "List of asynchronous validators used by the component when performing validation.\nUse async-validators when you need to\nperform some validation work on the server. Otherwise, use\nvalidators, which are synchronous.\n\nEach item in the Array is an instance that duck types AsyncValidator.\nImplicit validators created by a component when certain attributes\nare present (e.g. required attribute) are separate from\nvalidators specified through the async-validators\nattribute and the validators attribute.\nAt runtime when the component runs validation, it\ncombines the implicit validators with the list specified through the\nvalidators\nattribute and also the list specified through the\nasync-validators attribute.\nError messages are shown as soon as each async validator returns;\nwe do not wait until all the async validators finish to show errors.\nIf the component's valid state changes for the worse, it is also updated\nas each validator returns so valid will be invalidShown\nas soon as the first validator has an Error. It is recommended that you show the\nvalue you are validating in the error message because if the async operation takes a while,\nthe user could be typing in a new value when the error message comes back\nand might be confused what value the error is for. However, if the user enters a new value\n(like presses Enter or Tab), a new validation lifecycle will start\nand validation errors for the previous value will not be shown to the user.\nIf you need to format the value for the error message,\nyou can use\noj.IntlConverterUtils.getConverterInstance(converterOption)\nto get the converter instance,\nthen call converter.format(value).\n\n\nHints exposed by async-validators and validators are shown in the notewindow by default,\nor as determined by the 'validatorHint' property set on the\ndisplay-options attribute.\n\nSince async validators are run asynchronously, you should wait on the BusyContext before\nyou check valid property or the value property. Alternatively you can add a callback to\nthe onValidChanged or ojValueChanged events.\n\n\nThe steps performed always, running validation and clearing messages is the same as\nfor the inputBase#validators attribute.\n\n"
        }, {
            "name": "autocomplete",
            "description": "Dictates component's autocomplete state."
        }, {
            "name": "autofocus",
            "description": "Autofocus is a Boolean that reflects the autofocus attribute, If it is set to true\nthen the associated component will get input focus when the page is loaded.\nSetting this property doesn't set the focus to the component:\nit tells the browser to focus to it when the element is inserted in the document."
        }, {
            "name": "converter",
            "description": "a converter instance that duck types Converter. Or an object literal containing\nthe following properties.\n\nWhen converter property changes due to programmatic\nintervention, the element performs various tasks based on the current state it is in. \n\nSteps Performed Always\n\nAny cached converter instance is cleared and new converter created. The converter hint is\npushed to messaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif element is valid when converter property changes, the\ndisplay value is refreshed.\nif element is invalid and is showing messages when\nconverter property changes then all element messages are\ncleared and full validation run using the current display value on the element. if there are validation errors, then value property is not updated, and the error is shown. The display value is not refreshed in this case. if no errors result from the validation, the value property is updated; page author can listen to the onValueChanged event to clear custom errors. The display value is refreshed with the formatted value provided by converter.\n\n\nif element is invalid and has deferred messages when converter property changes, the display value is again refreshed with the formatted value provided by converter.\n\n\nClearing Messages\n\nOnly messages created by the element are cleared.\nmessagesCustom property is not cleared.\nPage authors can\nchoose to clear it explicitly when setting the converter option.\n\n"
        }, {
            "name": "describedBy",
            "description": "described the relationship between this component and another element."
        }, {
            "name": "disabled",
            "description": "Whether the component is disabled. The default is false."
        }, {
            "name": "displayOptions",
            "description": "Customize how to display to the user the form field's messages, converter and validator hints and help instruction text."
        }, {
            "name": "help",
            "description": "Form component help information.\n\nThe properties supported on the help option are:"
        }, {
            "name": "helpHints",
            "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component."
        }, {
            "name": "labelHint",
            "description": "Represents a hint for oj-form-layout element to render a label on the editable component."
        }, {
            "name": "messagesCustom",
            "description": "List of messages an app would add to the component"
        }, {
            "name": "name",
            "description": "It indicates the name of the component."
        }, {
            "name": "placeholder",
            "description": "The placeholder text to set on the element."
        }, {
            "name": "rawValue",
            "description": "The rawValue is the read-only property for retrieving\nthe current value from the input field in string form. The main consumer of\nrawValue is a converter.\n\nThe rawValue updates on the 'input' javascript event,\nso the rawValue changes as the value of the input is changed.\nIf the user types in '1,200' into the field, the rawValue will be '1', then '1,', then '1,2',\n..., and finally '1,200'. Then when the user blurs or presses\nEnter the value property gets converted and validated\n(if there is a converter or validators) and then gets updated if valid.\n\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "readonly",
            "description": "Dictates component's readonly state."
        }, {
            "name": "required",
            "description": "Whether the component is required or optional. When required is set to true, an implicit\nrequired validator is created using the validator factory -\noj.Validation.validatorFactory(oj.ValidatorFactory.VALIDATOR_TYPE_REQUIRED).createValidator().\n\nTranslations specified using the translations.required attribute\nand the label associated with the component, are passed through to the options parameter of the\ncreateValidator method.\n\n\nWhen required property changes due to programmatic intervention,\nthe component may clear messages and run validation, based on the current state it's in. \n\nRunning Validation\n\nif component is valid when required is set to true, then it runs deferred validation on\nthe value property. This is to ensure errors are not flagged unnecessarily.\n\nif component is invalid and has deferred messages when required is set to false, then\ncomponent messages are cleared but no deferred validation is run.\n\nif component is invalid and currently showing invalid messages when required is set, then\ncomponent messages are cleared and normal validation is run using the current display value. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event on the component to clear custom errors.\n\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n\n\n\nThis property set to false implies that a value is not required to be provided by the user.\nThis is the default.\nThis property set to true implies that a value is required to be provided by user and the\ninput's label will render a required icon. Additionally a required validator -\nRequiredValidator - is implicitly used if no explicit required validator is set.\nAn explicit required validator can be set by page authors using the validators attribute."
        }, {
            "name": "resizeBehavior",
            "description": "Defines the resizeBehavior of the textarea.\nNote that this is implemented via the native browser support for resize on the textarea element.\nIf a browser doesn't support this (IE, Edge, iOS, Android), then this attribute has no effect.",
            "values": [{
                "name": "both"
            }, {
                "name": "horizontal"
            }, {
                "name": "none"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "rows",
            "description": "The number of visible text lines in the textarea. It can also be used to\ngive specific height to the textarea."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valid",
            "description": "The validity state of the component",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }, {
            "name": "validators",
            "description": "List of synchronous validators used by component along with asynchronous validators\nand the implicit component validators when performing validation. Each item is either an\ninstance that duck types Validator, or is an Object literal containing the\nproperties listed below.\n\nImplicit validators are created by the element when certain attributes are present.\nFor example, if the required attribute\nis set, an implicit RequiredValidator is created.\nAt runtime when the component runs validation, it\ncombines all the implicit validators with all the validators\nspecified through this validators attribute\nand the async-validators attribute, and\nruns all of them.\n\n\nHints exposed by validators are shown in the notewindow by default, or as determined by the\n'validatorHint' property set on the display-options\nattribute.\n\n\n\nWhen validators property changes due to programmatic\nintervention, the component may decide to clear messages and run validation, based on the\ncurrent state it is in. \n\nSteps Performed Always\n\nThe cached list of validator instances are cleared and new validator hints is pushed to\nmessaging. E.g., notewindow displays the new hint(s).\n\n\n\nRunning Validation\n\nif component is valid when validators changes, component does nothing other than the\nsteps it always performs.\nif component is invalid and is showing messages when\nvalidators or\nasync-validators changes then all component messages are cleared and full validation run using the display value on the component. if there are validation errors, then value property is not updated and the error is shown. if no errors result from the validation, the value property is updated; page author can listen to the valueChanged event to clear custom errors.\n\n\nif component is invalid and has deferred messages when validators changes, it does\nnothing other than the steps it performs always.\n\n\n\nClearing Messages\n\nOnly messages created by the component are cleared.\nmessagesCustom property is not cleared.\n\n"
        }, {
            "name": "value",
            "description": "The value of the editablevalue component"
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when a default animation is about to start, such as when the component is\nbeing opened/closed or a child item is being added/removed. The default animation can\nbe cancelled by calling event.preventDefault."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when a default animation has ended."
        }],
        "name": "oj-text-area",
        "description": "Provides basic support for specifying a multi-line text value."
    }, {
        "attributes": [{
            "name": "animationDuration",
            "description": "We recommend using the component CSS classes to set component wide styling. This API should be used only for styling a specific instance of the component. The default values come from the CSS classess and varies based on theme. The duration of the animations in milliseconds."
        }, {
            "name": "animationOnDisplay",
            "description": "The type of animation to apply when the element is initially displayed.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "areaData",
            "description": "The oj.DataProvider for the areas of the thematic map. It should provide data rows where each row will map data for a single thematic map data area. The row key will be used as the id for thematic map areas. Note that when using this attribute, a template for the areaTemplate slot should be provided."
        }, {
            "name": "areas",
            "description": "An array of objects that define a row of data for an area data layer. Also accepts a Promise where no data will be rendered if the Promise is rejected. Regardless of the set value type, we will wrap and return a Promise when accessing the areas property."
        }, {
            "name": "as",
            "description": "An alias for the $current context variable passed to slot content for the areaTemplate, markerTemplate, or linkTemplate slots."
        }, {
            "name": "focusRenderer",
            "description": "An optional callback function to update the data item in response to changes in keyboard focus state."
        }, {
            "name": "hiddenCategories",
            "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered."
        }, {
            "name": "highlightMatch",
            "description": "The matching condition for the highlightedCategories option. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of category strings used for category highlighting. Data items with a category in highlightedCategories will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over data items.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "hoverRenderer",
            "description": "An optional callback function to update the node in response to changes in hover state."
        }, {
            "name": "initialZooming",
            "description": "Specifies whether the map will zoom to fit the data objects on initial render.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "isolatedItem",
            "description": "The id for the isolated area of this area data layer. If set, only the isolated area will be displayed."
        }, {
            "name": "labelDisplay",
            "description": "Determines how labels for this layer should be displayed.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "labelType",
            "description": "Determines which type of map labels to display.",
            "values": [{
                "name": "long"
            }, {
                "name": "short"
            }]
        }, {
            "name": "linkData",
            "description": "The oj.DataProvider for the links of the thematic map. It should provide data rows where each row will map data for a single thematic map data link. The row key will be used as the id for thematic map links. Note that when using this attribute, a template for the linkTemplate slot should be provided."
        }, {
            "name": "links",
            "description": "An array of objects that define the data for links. Also accepts a Promise where no data will be rendered if the Promise is rejected. Regardless of the set value type, we will wrap and return a Promise when accessing the links property."
        }, {
            "name": "mapProvider",
            "description": "An object with the following properties, used to define a custom map."
        }, {
            "name": "markerData",
            "description": "The oj.DataProvider for the markers of the thematic map. It should provide data rows where each row will map data for a single thematic map data marker. The row key will be used as the id for thematic map markers. Note that when using this attribute, a template for the markerTemplate slot should be provided."
        }, {
            "name": "markerZoomBehavior",
            "description": "Specifies marker behavior on zoom.",
            "values": [{
                "name": "fixed"
            }, {
                "name": "zoom"
            }]
        }, {
            "name": "markers",
            "description": "An array of objects that define a row of data for a data layer. Also accepts a Promise where no data will be rendered if the Promise is rejected. Regardless of the set value type, we will wrap and return a Promise when accessing the markers property."
        }, {
            "name": "maxZoom",
            "description": "Specifies the maximum zoom level for this element. This can be any number greater than 1.0 which indicates the maximum point to which the map can be scaled. A value of 2.0 implies that the map can be zoomed in until it reaches twice the viewport size. A maxZoom of 1.0 indicates that the user cannot zoom the map beyond the viewport size."
        }, {
            "name": "panning",
            "description": "Determines whether element panning is allowed.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "renderer",
            "description": "A callback function used to stamp custom SVG elements for a data layer."
        }, {
            "name": "selection",
            "description": "An array of id strings, used to define the selected data items."
        }, {
            "name": "selectionMode",
            "description": "The type of selection behavior that is enabled on the thematic map.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "selectionRenderer",
            "description": "An optional callback function to update the data item in response to changes in selection state."
        }, {
            "name": "styleDefaults",
            "description": "We recommend using the component CSS classes to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the data item. The default values come from the CSS classess and varies based on theme."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "tooltipDisplay",
            "description": "Specifies the tooltip behavior of the thematic map.",
            "values": [{
                "name": "auto"
            }, {
                "name": "labelAndShortDesc"
            }, {
                "name": "none"
            }, {
                "name": "shortDesc"
            }]
        }, {
            "name": "touchResponse",
            "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events if the element does not require an internal feature that requires a touch start gesture like panning or zooming. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if element panning is not available for those elements that support the feature.",
            "values": [{
                "name": "auto"
            }, {
                "name": "touchStart"
            }]
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "zooming",
            "description": "Determines whether element zooming is allowed.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }],
        "name": "oj-thematic-map",
        "description": "An interactive data visualization that displays data corresponding to geographic locations or regions.\r             Applications are required to supply a mapProvider for a valid thematic map."
    }, {
        "attributes": [{
            "name": "categories",
            "description": "An array of category strings corresponding to this area. This allows highlighting and filtering of areas.\nBy default, the label is used as the area category."
        }, {
            "name": "color",
            "description": "The area color. The default values come from the CSS classess and varies based on theme."
        }, {
            "name": "label",
            "description": "Text used for the area's label."
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the area. The default values come from the CSS classess and varies based on theme."
        }, {
            "name": "location",
            "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this area is associated with."
        }, {
            "name": "opacity",
            "description": "The area opacity."
        }, {
            "name": "selectable",
            "description": "Specifies whether or not the area will be selectable.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "shortDesc",
            "description": "The text that displays in the area's tooltip."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class defining the style of the area."
        }, {
            "name": "svgStyle",
            "description": "The CSS style object defining the style of the area."
        }],
        "name": "oj-thematic-map-area",
        "description": "ojThematicMapArea"
    }, {
        "attributes": [{
            "name": "categories",
            "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links.\nBy default, the label is used as the link category."
        }, {
            "name": "color",
            "description": "The link color."
        }, {
            "name": "endLocation",
            "description": "An object used to determine the end point of the link."
        }, {
            "name": "selectable",
            "description": "Specifies whether or not the link will be selectable.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "shortDesc",
            "description": "The text that displays in the link's tooltip."
        }, {
            "name": "startLocation",
            "description": "An object used to determine the start point of the link."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class defining the style of the link."
        }, {
            "name": "svgStyle",
            "description": "The CSS style object defining the style of the link."
        }, {
            "name": "width",
            "description": "The link width in pixels."
        }],
        "name": "oj-thematic-map-link",
        "description": "ojThematicMapLink"
    }, {
        "attributes": [{
            "name": "borderColor",
            "description": "The marker border color."
        }, {
            "name": "borderStyle",
            "description": "The marker border style.",
            "values": [{
                "name": "none"
            }, {
                "name": "solid"
            }]
        }, {
            "name": "borderWidth",
            "description": "The marker border width in pixels."
        }, {
            "name": "categories",
            "description": "An array of category strings corresponding to this marker. This allows highlighting and filtering of markers.\nBy default, the label is used as the marker category."
        }, {
            "name": "color",
            "description": "The marker color. The default values come from the CSS classess and varies based on theme."
        }, {
            "name": "height",
            "description": "The marker height in pixels."
        }, {
            "name": "label",
            "description": "Text used for the marker's label."
        }, {
            "name": "labelPosition",
            "description": "Determines the label position relative to the marker.",
            "values": [{
                "name": "bottom"
            }, {
                "name": "center"
            }, {
                "name": "top"
            }]
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the marker. The default values come from the CSS classess and varies based on theme."
        }, {
            "name": "location",
            "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this marker is associated with."
        }, {
            "name": "opacity",
            "description": "The marker opacity."
        }, {
            "name": "rotation",
            "description": "The angle to rotate the marker in clockwise degrees around the marker center."
        }, {
            "name": "selectable",
            "description": "Specifies whether or not the marker will be selectable.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "shape",
            "description": "Specifies the shape of a marker. Can take the name of a built-in shape or the svg path commands for a custom shape."
        }, {
            "name": "shortDesc",
            "description": "The text that displays in the marker's tooltip."
        }, {
            "name": "source",
            "description": "Specifies an URI specifying the location of the image resource to use for the marker instead of a built-in shape.\nThe shape attribute is ignored if the source image is defined."
        }, {
            "name": "sourceHover",
            "description": "An optional URI specifying the location of the hover image resource. If not defined, the source image will be used."
        }, {
            "name": "sourceHoverSelected",
            "description": "An optional URI specifying the location of the selected image resource on hover. If not defined,\nthe sourceSelected image will be used. If sourceSelected is not defined, then the source image will be used.\n* @expose"
        }, {
            "name": "sourceSelected",
            "description": "An optional URI specifying the location of the selected image. If not defined, the source image will be used."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class defining the style of the marker."
        }, {
            "name": "svgStyle",
            "description": "The CSS style object defining the style of the marker."
        }, {
            "name": "value",
            "description": "A data value used to calculate the marker dimensions based on the range of all the data values\nand the element size. Markers with negative or zero data values will not be rendered. If specified,\nthis value takes precedence over the width and height attributes."
        }, {
            "name": "width",
            "description": "The pixel width for this marker. Note that this attribute will be ignored if a value is provided to calculate marker."
        }, {
            "name": "x",
            "description": "The x coordinate of the marker transformed using the map projection, which can be null if location is set instead."
        }, {
            "name": "y",
            "description": "The x coordinate of the marker transformed using the map projection, which can be null if location is set instead."
        }],
        "name": "oj-thematic-map-marker",
        "description": "ojThematicMapMarker"
    }, {
        "attributes": [{
            "name": "converter",
            "description": "A converter (an object literal or instance that duck types Converter) used to format the labels of the time axis for all 'scale' values, or an object literal whose keys are 'scale' values that map specific converters for scale specific formatting. See DateTimeConverterFactory for details on creating built-in datetime converters."
        }, {
            "name": "end",
            "description": "The end time of the time axis. A valid value is required in order for the time axis to properly render. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "scale",
            "description": "The time scale used for the time axis. This is required in order for the time axis to properly render.",
            "values": [{
                "name": "days"
            }, {
                "name": "hours"
            }, {
                "name": "minutes"
            }, {
                "name": "months"
            }, {
                "name": "quarters"
            }, {
                "name": "seconds"
            }, {
                "name": "weeks"
            }, {
                "name": "years"
            }]
        }, {
            "name": "start",
            "description": "The start time of the time axis. A valid value is required in order for the time axis to properly render. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-time-axis",
        "description": "Displays a range of dates based on specified start and end dates and a time scale."
    }, {
        "attributes": [{
            "name": "animationOnDataChange",
            "description": "Defines the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Defines the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "end",
            "description": "The end time of the timeline. A valid value is required in order for the timeline to properly render. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "majorAxis",
            "description": "An object with the following properties, used to define a timeline axis. If not specified, no axis labels will be shown above the minor axis or in the overview."
        }, {
            "name": "minorAxis",
            "description": "An object with the following properties, used to define a timeline axis. This is required in order for the timeline to properly render."
        }, {
            "name": "orientation",
            "description": "The orientation of the element.",
            "values": [{
                "name": "horizontal"
            }, {
                "name": "vertical"
            }]
        }, {
            "name": "overview",
            "description": "An object with the following properties, used to define a timeline overview. If not specified, no overview will be shown."
        }, {
            "name": "referenceObjects",
            "description": "The array of reference objects associated with the timeline. For each reference object, a line is rendered at the specified value. Currently only the first reference object in the array is supported. Any additional objects supplied in the array will be ignored."
        }, {
            "name": "selection",
            "description": "An array of strings containing the ids of the initially selected items."
        }, {
            "name": "selectionMode",
            "description": "The type of selection behavior that is enabled on the timeline. If 'single' is specified, only a single item across all series can be selected at once. If 'multiple', any number of items across all series can be selected at once. Otherwise, selection is disabled.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "series",
            "description": "An array of objects with the following properties, used to define a timeline series. Also accepts a Promise that will resolve with an array for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "start",
            "description": "The start time of the timeline. A valid value is required in order for the timeline to properly render. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "styleDefaults",
            "description": "An object with the following properties, used to define default styling for the timeline. Component CSS classes should be used to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the data item. Some property default values come from the CSS and varies based on theme."
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "valueFormats",
            "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to item properties."
        }, {
            "name": "viewportEnd",
            "description": "The end time of the timeline's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the timeline. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "viewportStart",
            "description": "The start time of the timeline's viewport. If not specified or invalid, this will default to a value determined by the initial 'scale' of the minor axis and the width of the timeline. See Date and Time Formats for more details on the required string formats."
        }, {
            "name": "on-oj-viewport-change",
            "description": "Triggered after the viewport is changed due to a zoom or scroll operation."
        }],
        "name": "oj-timeline",
        "description": "An interactive data visualization that displays a series of events in chronological order."
    }, {
        "attributes": [{
            "name": "chroming",
            "description": "Indicates in what states the toolbar's buttons and buttonsets have chrome (background and border). This option only affects buttons and buttonsets that have never had their own chroming option set. This allows individual buttons and buttonsets to opt out of their toolbar's chroming if needed. The default chroming varies by theme. Each theme can set its default by setting $toolbarChromingOptionDefault as seen in the example below. Once a value has been set on this option, that value applies regardless of theme.",
            "values": [{
                "name": "full"
            }, {
                "name": "half"
            }, {
                "name": "outlined"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }],
        "name": "oj-toolbar",
        "description": "Displays a strip of control elements (icons, buttons, separators, etc.) with support for touch, mouse, and keyboard interactions."
    }, {
        "attributes": [{
            "name": "selectedStep",
            "description": "Indicates the id of the current selected step."
        }, {
            "name": "steps",
            "description": "The array of step objects."
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-before-deselect",
            "description": "Triggered immediately before a step is deselected."
        }, {
            "name": "on-oj-deselect",
            "description": "Triggered after a step has been deselected."
        }, {
            "name": "on-oj-before-select",
            "description": "Triggered immediately before a Step is selected."
        }, {
            "name": "on-oj-select",
            "description": "Triggered after a step has been selected."
        }],
        "name": "oj-train",
        "description": "Displays a navigation visual element that allows an application user to go between different steps of a process."
    }, {
        "attributes": [{
            "name": "animationDuration",
            "description": "Specifies the animation duration in milliseconds. For data change animations with multiple stages, this attribute defines the duration of each stage. For example, if an animation contains two stages, the total duration will be two times this attribute's value. The default value comes from the CSS and varies based on theme."
        }, {
            "name": "animationOnDataChange",
            "description": "Specifies the animation that is applied on data changes.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationOnDisplay",
            "description": "Specifies the animation that is shown on initial display.",
            "values": [{
                "name": "auto"
            }, {
                "name": "none"
            }]
        }, {
            "name": "animationUpdateColor",
            "description": "The color that is displayed during a data change animation when a node is updated."
        }, {
            "name": "as",
            "description": "An alias for the $current context variable passed to slot content for the nodeTemplate slot."
        }, {
            "name": "colorLabel",
            "description": "Specifies the label describing the color metric of the treemap. This label will be used in the legend."
        }, {
            "name": "data",
            "description": "The oj.DataProvider for the nodes of the treemap. It should provide a data tree where each node in the data tree corresponds to a node in the treemap. The row key will be used as the id for treemap nodes. Note that when using this attribute, a template for the nodeTemplate slot should be provided."
        }, {
            "name": "displayLevels",
            "description": "The number of levels of nodes to display. By default all nodes are displayed."
        }, {
            "name": "drilling",
            "description": "Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire an ojBeforeDrill and ojDrill event on click (double click if selection is enabled). Drilling on a node causes a property change to the rootNode attribute. The displayLevels attribute can be used in conjunction with drilling to display very deep hieracrchies. Use \"on\" to enable drilling for all nodes. To enable or disable drilling on individual nodes use the drilling attribute in each node.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "groupGaps",
            "description": "Specifies whether gaps are displayed between groups. Gaps can be useful for drawing attention to the differences between groups.",
            "values": [{
                "name": "all"
            }, {
                "name": "none"
            }, {
                "name": "outer"
            }]
        }, {
            "name": "hiddenCategories",
            "description": "An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered."
        }, {
            "name": "highlightMatch",
            "description": "The matching condition for the highlightedCategories property. By default, highlightMatch is 'all' and only items whose categories match all of the values specified in the highlightedCategories array will be highlighted. If highlightMatch is 'any', then items that match at least one of the highlightedCategories values will be highlighted.",
            "values": [{
                "name": "all"
            }, {
                "name": "any"
            }]
        }, {
            "name": "highlightedCategories",
            "description": "An array of category strings used for highlighting. Nodes matching all categories in this array will be highlighted."
        }, {
            "name": "hoverBehavior",
            "description": "Defines the behavior applied when hovering over the nodes.",
            "values": [{
                "name": "dim"
            }, {
                "name": "none"
            }]
        }, {
            "name": "hoverBehaviorDelay",
            "description": "Specifies initial hover delay in ms for highlighting nodes."
        }, {
            "name": "isolatedNode",
            "description": "The id of the initially isolated node."
        }, {
            "name": "layout",
            "description": "Specifies the layout of the treemap. The squarified layout results in nodes that are as square as possible, for easier comparison of node sizes. The sliceAndDice layouts are useful for animation, as the ordering of the data is maintained. SliceAndDice layouts are also useful for small form factor treemaps.",
            "values": [{
                "name": "sliceAndDiceHorizontal"
            }, {
                "name": "sliceAndDiceVertical"
            }, {
                "name": "squarified"
            }]
        }, {
            "name": "nodeContent",
            "description": "An object defining custom node content for the treemap. Only leaf nodes with no child nodes will have the custom content rendered."
        }, {
            "name": "nodeDefaults",
            "description": "An object defining default properties for the nodes. Component CSS classes should be used to set component wide styling. This API should be used only for styling a specific instance of the component. Properties specified on this object may be overridden by specifications on the treemap nodes. Some property default values come from the CSS and varies based on theme."
        }, {
            "name": "nodeSeparators",
            "description": "Specifies the visual effect for separating the nodes from each other. This allows for adjacent nodes of the same color to be distinguished.",
            "values": [{
                "name": "bevels"
            }, {
                "name": "gaps"
            }]
        }, {
            "name": "nodes",
            "description": "An array of objects with the following properties that defines the data for the nodes. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected."
        }, {
            "name": "rootNode",
            "description": "The id of the root node. When specified, only the root node and children of the root will be displayed."
        }, {
            "name": "selection",
            "description": "An array containing the ids of the initially selected nodes."
        }, {
            "name": "selectionMode",
            "description": "Specifies the selection mode.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "sizeLabel",
            "description": "Specifies the label describing the size metric of the treemap. This label will be used in the legend."
        }, {
            "name": "sorting",
            "description": "Specifies whether the nodes are sorted by size. When sorting is enabled, nodes that have the same parent are sorted in order of descending size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "tooltip",
            "description": "An object containing an optional callback function for tooltip customization."
        }, {
            "name": "touchResponse",
            "description": "Data visualizations require a press and hold delay before triggering tooltips and rollover effects on mobile devices to avoid interfering with page panning, but these hold delays can make applications seem slower and less responsive. For a better user experience, the application can remove the touch and hold delay when data visualizations are used within a non scrolling container or if there is sufficient space outside of the visualization for panning. If touchResponse is touchStart the element will instantly trigger the touch gesture and consume the page pan events. If touchResponse is auto, the element will behave like touchStart if it determines that it is not rendered within scrolling content and if panning is not available for those elements that support the feature.",
            "values": [{
                "name": "auto"
            }, {
                "name": "touchStart"
            }]
        }, {
            "name": "trackResize",
            "description": "Defines whether the element will automatically render in response to changes in size. If set to off, then the application is responsible for calling refresh to render the element at the new size.",
            "values": [{
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-before-drill",
            "description": "Triggered immediately before any node in the treemap is drilled into. The drill event can be vetoed if the beforeDrill callback returns false."
        }, {
            "name": "on-oj-drill",
            "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise)."
        }],
        "name": "oj-treemap",
        "description": "An interactive data visualization in which hierarchical data is represented across two dimensions by the size and color of nested rectangular nodes."
    }, {
        "attributes": [{
            "name": "categories",
            "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend and other visualization elements. The categories array of each node is required to be a superset of the categories array of its parent node. If not specified, the ids of the node and its ancestors will be used."
        }, {
            "name": "color",
            "description": "The fill color of the node."
        }, {
            "name": "drilling",
            "description": "Specifies whether drilling is enabled for the node. Drillable nodes will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all nodes at once, use the drilling attribute in the top level.",
            "values": [{
                "name": "inherit"
            }, {
                "name": "off"
            }, {
                "name": "on"
            }]
        }, {
            "name": "groupLabelDisplay",
            "description": "The label display behavior for group nodes.",
            "values": [{
                "name": "header"
            }, {
                "name": "node"
            }, {
                "name": "off"
            }]
        }, {
            "name": "header",
            "description": "An object defining the properties for the node header."
        }, {
            "name": "label",
            "description": "The label for this node."
        }, {
            "name": "labelDisplay",
            "description": "The label display behavior for leaf nodes.",
            "values": [{
                "name": "node"
            }, {
                "name": "off"
            }]
        }, {
            "name": "labelHalign",
            "description": "The horizontal alignment for labels displayed within the node.",
            "values": [{
                "name": "center"
            }, {
                "name": "end"
            }, {
                "name": "start"
            }]
        }, {
            "name": "labelStyle",
            "description": "The CSS style object defining the style of the label. The CSS white-space property can be defined with value \"nowrap\" to disable default text wrapping."
        }, {
            "name": "labelValign",
            "description": "The vertical alignment for labels displayed within the node.",
            "values": [{
                "name": "bottom"
            }, {
                "name": "center"
            }, {
                "name": "top"
            }]
        }, {
            "name": "pattern",
            "description": "The pattern used to fill the node.",
            "values": [{
                "name": "largeChecker"
            }, {
                "name": "largeCrosshatch"
            }, {
                "name": "largeDiagonalLeft"
            }, {
                "name": "largeDiagonalRight"
            }, {
                "name": "largeDiamond"
            }, {
                "name": "largeTriangle"
            }, {
                "name": "none"
            }, {
                "name": "smallChecker"
            }, {
                "name": "smallCrosshatch"
            }, {
                "name": "smallDiagonalLeft"
            }, {
                "name": "smallDiagonalRight"
            }, {
                "name": "smallDiamond"
            }, {
                "name": "smallTriangle"
            }]
        }, {
            "name": "selectable",
            "description": "Specifies whether or not the node will be selectable.",
            "values": [{
                "name": "auto"
            }, {
                "name": "off"
            }]
        }, {
            "name": "shortDesc",
            "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text."
        }, {
            "name": "svgClassName",
            "description": "The CSS style class to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute."
        }, {
            "name": "svgStyle",
            "description": "The inline style to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute."
        }, {
            "name": "value",
            "description": "The value of the node. The value determines the relative size of the node."
        }],
        "name": "oj-treemap-node",
        "description": "ojTreemapNode"
    }, {
        "attributes": [{
            "name": "currentItem",
            "description": "The key of the item that has the browser focus.\nThis is a read-only attribute so page authors cannot set or change it directly."
        }, {
            "name": "data",
            "description": "The data source for the TreeView. Accepts an instance of oj.TreeDataSource.\nSee the data source section in the introduction for out of the box data source types.\nIf the data attribute is not specified, the child elements are used as content. If there's no\ncontent specified, then an empty list is rendered."
        }, {
            "name": "dnd",
            "description": "Enable drag and drop functionality.\nJET provides support for HTML5 Drag and Drop events. Please refer to mozilla.org/en-US/docs/Web/Guide/HTML/Drag_and_drop third party documentation\non HTML5 Drag and Drop to learn how to use it."
        }, {
            "name": "expanded",
            "description": "Specifies the key set containing the keys of the TreeView items that should be expanded.\nUse the ExpandedKeySet class to specify items to expand.\nUse the ExpandAllKeySet class to expand all items."
        }, {
            "name": "item",
            "description": "The item attribute contains a subset of attributes for items."
        }, {
            "name": "selection",
            "description": "The current selections in the TreeView. An empty array indicates nothing is selected."
        }, {
            "name": "selectionMode",
            "description": "Specifies whether selection can be made and the cardinality of selection in the TreeView.",
            "values": [{
                "name": "multiple"
            }, {
                "name": "none"
            }, {
                "name": "single"
            }]
        }, {
            "name": "translations",
            "description": "A collection of translated resources from the translation bundle, or null if this component has no resources."
        }, {
            "name": "on-oj-animate-end",
            "description": "Triggered when the default animation of a particular action has ended.\nNote this event will not be triggered if application cancelled the default animation on animateStart."
        }, {
            "name": "on-oj-animate-start",
            "description": "Triggered when the default animation of a particular action is about to start.\nThe default animation can be cancelled by calling event.preventDefault()."
        }, {
            "name": "on-oj-before-collapse",
            "description": "Triggered before an item is collapsed via the expanded attribute or via the UI.\nCall event.preventDefault() to veto the event, which prevents collapsing the item."
        }, {
            "name": "on-oj-before-current-item",
            "description": "Triggered before the current item is changed via the currentItem attribute or via the UI.\nCall event.preventDefault() to veto the event, which prevents changing the current item."
        }, {
            "name": "on-oj-before-expand",
            "description": "Triggered before an item is expanded via the expanded attribute or via the UI.\nCall event.preventDefault() to veto the event, which prevents expanding the item."
        }, {
            "name": "on-oj-collapse",
            "description": "Triggered after an item has been collapsed."
        }, {
            "name": "on-oj-expand",
            "description": "Triggered after an item has been expanded."
        }],
        "name": "oj-tree-view",
        "description": "Displays hierarchical relationships between the items in a tree."
    }, {
        "attributes": [{
            "name": "valid",
            "description": "The current validity state of the\noj-validation-group element.\n\nThe oj-validation-group's\nvalid property value is calculated from all the\nenabled components it tracks. The most 'invalid' component's\nvalid property value will be\noj-validation-group's valid property value.\nFor example,\nif all the components are valid except one is \"invalidShown\", then oj-validation-group's\nvalid value will be \"invalidShown\". If one is \"invalidShown\" and one is \"invalidHidden\",\nthen oj-validation-group's valid value will be \"invalidShown\" since \"invalidShown\" is more\ninvalid than \"invalidHidden\".\n\n\nWhen any of the enabled tracked component's valid value changes, oj-validation-group will\nbe notified and will update its own valid value if it has changed.\nThere is no default value for the valid property\nsince it is a read-only property that is calculated on initialization\nand kept updated if any of its tracked component's valid value changes.\n\n\nThe oj-validation-group does not filter out components that are hidden.\nHidden components will be considered\nin oj-validation-group's valid calculation as long as they are enabled.\nA hidden enabled component's valid state is no different\nthan a visible enabled component; if there\nis an error that isn't a deferred error, its valid value is \"invalidShown\".\nYou can disable any components you do not want\nconsidered in oj-validation-group's valid value. Note: New valid states may be added to the list of valid values in future releases. If so, we will keep the convention where if it is valid, it will start with \"valid\". If it is invalid, it will start with \"invalid\". If it is pending, it will start with \"pending\".\n",
            "values": [{
                "name": "invalidHidden"
            }, {
                "name": "invalidShown"
            }, {
                "name": "pending"
            }, {
                "name": "valid"
            }]
        }],
        "name": "oj-validation-group",
        "description": "ojValidationGroup"
    }]
}